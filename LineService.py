#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#
import os, sys
sys.path.append(os.getcwd())
from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import logging
from akad.ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def getRSAKey(self):
    pass

  def notifyEmailConfirmationResult(self, parameterMap):
    """
    Parameters:
     - parameterMap
    """
    pass

  def registerVirtualAccount(self, locale, encryptedVirtualUserId, encryptedPassword):
    """
    Parameters:
     - locale
     - encryptedVirtualUserId
     - encryptedPassword
    """
    pass

  def requestVirtualAccountPasswordChange(self, virtualMid, encryptedVirtualUserId, encryptedOldPassword, encryptedNewPassword):
    """
    Parameters:
     - virtualMid
     - encryptedVirtualUserId
     - encryptedOldPassword
     - encryptedNewPassword
    """
    pass

  def requestVirtualAccountPasswordSet(self, virtualMid, encryptedVirtualUserId, encryptedNewPassword):
    """
    Parameters:
     - virtualMid
     - encryptedVirtualUserId
     - encryptedNewPassword
    """
    pass

  def unregisterVirtualAccount(self, virtualMid):
    """
    Parameters:
     - virtualMid
    """
    pass

  def checkUserAge(self, carrier, sessionId, verifier, standardAge):
    """
    Parameters:
     - carrier
     - sessionId
     - verifier
     - standardAge
    """
    pass

  def checkUserAgeWithDocomo(self, openIdRedirectUrl, standardAge, verifier):
    """
    Parameters:
     - openIdRedirectUrl
     - standardAge
     - verifier
    """
    pass

  def retrieveOpenIdAuthUrlWithDocomo(self):
    pass

  def retrieveRequestToken(self, carrier):
    """
    Parameters:
     - carrier
    """
    pass

  def addBuddyMember(self, requestId, userMid):
    """
    Parameters:
     - requestId
     - userMid
    """
    pass

  def addBuddyMembers(self, requestId, userMids):
    """
    Parameters:
     - requestId
     - userMids
    """
    pass

  def blockBuddyMember(self, requestId, mid):
    """
    Parameters:
     - requestId
     - mid
    """
    pass

  def commitSendMessagesToAll(self, requestIdList):
    """
    Parameters:
     - requestIdList
    """
    pass

  def commitSendMessagesTomids(self, requestIdList, mids):
    """
    Parameters:
     - requestIdList
     - mids
    """
    pass

  def containsBuddyMember(self, requestId, userMid):
    """
    Parameters:
     - requestId
     - userMid
    """
    pass

  def downloadMessageContent(self, requestId, messageId):
    """
    Parameters:
     - requestId
     - messageId
    """
    pass

  def downloadMessageContentPreview(self, requestId, messageId):
    """
    Parameters:
     - requestId
     - messageId
    """
    pass

  def downloadProfileImage(self, requestId):
    """
    Parameters:
     - requestId
    """
    pass

  def downloadProfileImagePreview(self, requestId):
    """
    Parameters:
     - requestId
    """
    pass

  def getActiveMemberCountByBuddyMid(self, buddyMid):
    """
    Parameters:
     - buddyMid
    """
    pass

  def getActiveMemberMidsByBuddyMid(self, buddyMid):
    """
    Parameters:
     - buddyMid
    """
    pass

  def getAllBuddyMembers(self):
    pass

  def getBlockedBuddyMembers(self):
    pass

  def getBlockerCountByBuddyMid(self, buddyMid):
    """
    Parameters:
     - buddyMid
    """
    pass

  def getBuddyDetailByMid(self, buddyMid):
    """
    Parameters:
     - buddyMid
    """
    pass

  def getBuddyProfile(self):
    pass

  def getContactTicket(self):
    pass

  def getMemberCountByBuddyMid(self, buddyMid):
    """
    Parameters:
     - buddyMid
    """
    pass

  def getSendBuddyMessageResult(self, sendBuddyMessageRequestId):
    """
    Parameters:
     - sendBuddyMessageRequestId
    """
    pass

  def getSetBuddyOnAirResult(self, setBuddyOnAirRequestId):
    """
    Parameters:
     - setBuddyOnAirRequestId
    """
    pass

  def getUpdateBuddyProfileResult(self, updateBuddyProfileRequestId):
    """
    Parameters:
     - updateBuddyProfileRequestId
    """
    pass

  def isBuddyOnAirByMid(self, buddyMid):
    """
    Parameters:
     - buddyMid
    """
    pass

  def linkAndSendBuddyContentMessageToAllAsync(self, requestId, msg, sourceContentId):
    """
    Parameters:
     - requestId
     - msg
     - sourceContentId
    """
    pass

  def linkAndSendBuddyContentMessageTomids(self, requestId, msg, sourceContentId, mids):
    """
    Parameters:
     - requestId
     - msg
     - sourceContentId
     - mids
    """
    pass

  def notifyBuddyBlocked(self, buddyMid, blockerMid):
    """
    Parameters:
     - buddyMid
     - blockerMid
    """
    pass

  def notifyBuddyUnblocked(self, buddyMid, blockerMid):
    """
    Parameters:
     - buddyMid
     - blockerMid
    """
    pass

  def registerBuddy(self, buddyId, searchId, displayName, statusMeessage, picture, settings):
    """
    Parameters:
     - buddyId
     - searchId
     - displayName
     - statusMeessage
     - picture
     - settings
    """
    pass

  def registerBuddyAdmin(self, buddyId, searchId, displayName, statusMessage, picture):
    """
    Parameters:
     - buddyId
     - searchId
     - displayName
     - statusMessage
     - picture
    """
    pass

  def reissueContactTicket(self, expirationTime, maxUseCount):
    """
    Parameters:
     - expirationTime
     - maxUseCount
    """
    pass

  def removeBuddyMember(self, requestId, userMid):
    """
    Parameters:
     - requestId
     - userMid
    """
    pass

  def removeBuddyMembers(self, requestId, userMids):
    """
    Parameters:
     - requestId
     - userMids
    """
    pass

  def sendBuddyContentMessageToAll(self, requestId, msg, content):
    """
    Parameters:
     - requestId
     - msg
     - content
    """
    pass

  def sendBuddyContentMessageToAllAsync(self, requestId, msg, content):
    """
    Parameters:
     - requestId
     - msg
     - content
    """
    pass

  def sendBuddyContentMessageTomids(self, requestId, msg, content, mids):
    """
    Parameters:
     - requestId
     - msg
     - content
     - mids
    """
    pass

  def sendBuddyContentMessageTomidsAsync(self, requestId, msg, content, mids):
    """
    Parameters:
     - requestId
     - msg
     - content
     - mids
    """
    pass

  def sendBuddyMessageToAll(self, requestId, msg):
    """
    Parameters:
     - requestId
     - msg
    """
    pass

  def sendBuddyMessageToAllAsync(self, requestId, msg):
    """
    Parameters:
     - requestId
     - msg
    """
    pass

  def sendBuddyMessageTomids(self, requestId, msg, mids):
    """
    Parameters:
     - requestId
     - msg
     - mids
    """
    pass

  def sendBuddyMessageTomidsAsync(self, requestId, msg, mids):
    """
    Parameters:
     - requestId
     - msg
     - mids
    """
    pass

  def sendIndividualEventToAllAsync(self, requestId, buddyMid, notificationStatus):
    """
    Parameters:
     - requestId
     - buddyMid
     - notificationStatus
    """
    pass

  def setBuddyOnAir(self, requestId, onAir):
    """
    Parameters:
     - requestId
     - onAir
    """
    pass

  def setBuddyOnAirAsync(self, requestId, onAir):
    """
    Parameters:
     - requestId
     - onAir
    """
    pass

  def storeMessage(self, requestId, messageRequest):
    """
    Parameters:
     - requestId
     - messageRequest
    """
    pass

  def unblockBuddyMember(self, requestId, mid):
    """
    Parameters:
     - requestId
     - mid
    """
    pass

  def unregisterBuddy(self, requestId):
    """
    Parameters:
     - requestId
    """
    pass

  def unregisterBuddyAdmin(self, requestId):
    """
    Parameters:
     - requestId
    """
    pass

  def updateBuddyAdminProfileAttribute(self, requestId, attributes):
    """
    Parameters:
     - requestId
     - attributes
    """
    pass

  def updateBuddyAdminProfileImage(self, requestId, picture):
    """
    Parameters:
     - requestId
     - picture
    """
    pass

  def updateBuddyProfileAttributes(self, requestId, attributes):
    """
    Parameters:
     - requestId
     - attributes
    """
    pass

  def updateBuddyProfileAttributesAsync(self, requestId, attributes):
    """
    Parameters:
     - requestId
     - attributes
    """
    pass

  def updateBuddyProfileImage(self, requestId, image):
    """
    Parameters:
     - requestId
     - image
    """
    pass

  def updateBuddyProfileImageAsync(self, requestId, image):
    """
    Parameters:
     - requestId
     - image
    """
    pass

  def updateBuddySearchId(self, requestId, searchId):
    """
    Parameters:
     - requestId
     - searchId
    """
    pass

  def updateBuddySettings(self, settings):
    """
    Parameters:
     - settings
    """
    pass

  def uploadBuddyContent(self, contentType, content):
    """
    Parameters:
     - contentType
     - content
    """
    pass

  def findBuddyContactsByQuery(self, language, country, query, fromIndex, count, requestSource):
    """
    Parameters:
     - language
     - country
     - query
     - fromIndex
     - count
     - requestSource
    """
    pass

  def getBuddyContacts(self, language, country, classification, fromIndex, count):
    """
    Parameters:
     - language
     - country
     - classification
     - fromIndex
     - count
    """
    pass

  def getBuddyDetail(self, buddyMid):
    """
    Parameters:
     - buddyMid
    """
    pass

  def getBuddyOnAir(self, buddyMid):
    """
    Parameters:
     - buddyMid
    """
    pass

  def getCountriesHavingBuddy(self):
    pass

  def getNewlyReleasedBuddyIds(self, country):
    """
    Parameters:
     - country
    """
    pass

  def getPopularBuddyBanner(self, language, country, applicationType, resourceSpecification):
    """
    Parameters:
     - language
     - country
     - applicationType
     - resourceSpecification
    """
    pass

  def getPopularBuddyLists(self, language, country):
    """
    Parameters:
     - language
     - country
    """
    pass

  def getPromotedBuddyContacts(self, language, country):
    """
    Parameters:
     - language
     - country
    """
    pass

  def activeBuddySubscriberCount(self):
    pass

  def addOperationForChannel(self, opType, param1, param2, param3):
    """
    Parameters:
     - opType
     - param1
     - param2
     - param3
    """
    pass

  def displayBuddySubscriberCount(self):
    pass

  def findContactByUseridWithoutAbuseBlockForChannel(self, userid):
    """
    Parameters:
     - userid
    """
    pass

  def getAllContactIdsForChannel(self):
    pass

  def getCompactContacts(self, lastModifiedTimestamp):
    """
    Parameters:
     - lastModifiedTimestamp
    """
    pass

  def getContactsForChannel(self, ids):
    """
    Parameters:
     - ids
    """
    pass

  def getDisplayName(self, mid):
    """
    Parameters:
     - mid
    """
    pass

  def getFavoriteMidsForChannel(self):
    pass

  def getFriendMids(self):
    pass

  def getGroupMemberMids(self, groupId):
    """
    Parameters:
     - groupId
    """
    pass

  def getGroupsForChannel(self, groupIds):
    """
    Parameters:
     - groupIds
    """
    pass

  def getIdentityCredential(self):
    pass

  def getJoinedGroupIdsForChannel(self):
    pass

  def getMetaProfile(self):
    pass

  def getMid(self):
    pass

  def getPrimaryClientForChannel(self):
    pass

  def getProfileForChannel(self):
    pass

  def getSimpleChannelContacts(self, ids):
    """
    Parameters:
     - ids
    """
    pass

  def getUserCountryForBilling(self, country, remoteIp):
    """
    Parameters:
     - country
     - remoteIp
    """
    pass

  def getUserCreateTime(self):
    pass

  def getUserIdentities(self):
    pass

  def getUserLanguage(self):
    pass

  def getUserMidsWhoAddedMe(self):
    pass

  def isGroupMember(self, groupId):
    """
    Parameters:
     - groupId
    """
    pass

  def isInContact(self, mid):
    """
    Parameters:
     - mid
    """
    pass

  def registerChannelCP(self, cpId, registerPassword):
    """
    Parameters:
     - cpId
     - registerPassword
    """
    pass

  def removeNotificationStatus(self, notificationStatus):
    """
    Parameters:
     - notificationStatus
    """
    pass

  def sendMessageForChannel(self, message):
    """
    Parameters:
     - message
    """
    pass

  def sendPinCodeOperation(self, verifier):
    """
    Parameters:
     - verifier
    """
    pass

  def updateProfileAttributeForChannel(self, profileAttribute, value):
    """
    Parameters:
     - profileAttribute
     - value
    """
    pass

  def approveChannelAndIssueChannelToken(self, channelId):
    """
    Parameters:
     - channelId
    """
    pass

  def approveChannelAndIssueRequestToken(self, channelId, otpId):
    """
    Parameters:
     - channelId
     - otpId
    """
    pass

  def fetchNotificationItems(self, localRev):
    """
    Parameters:
     - localRev
    """
    pass

  def getApprovedChannels(self, lastSynced, locale):
    """
    Parameters:
     - lastSynced
     - locale
    """
    pass

  def getChannelInfo(self, channelId, locale):
    """
    Parameters:
     - channelId
     - locale
    """
    pass

  def getChannelNotificationSetting(self, channelId, locale):
    """
    Parameters:
     - channelId
     - locale
    """
    pass

  def getChannelNotificationSettings(self, locale):
    """
    Parameters:
     - locale
    """
    pass

  def getChannels(self, lastSynced, locale):
    """
    Parameters:
     - lastSynced
     - locale
    """
    pass

  def getDomains(self, lastSynced):
    """
    Parameters:
     - lastSynced
    """
    pass

  def getFriendChannelMatrices(self, channelIds):
    """
    Parameters:
     - channelIds
    """
    pass

  def getNotificationBadgeCount(self, localRev):
    """
    Parameters:
     - localRev
    """
    pass

  def issueChannelToken(self, channelId):
    """
    Parameters:
     - channelId
    """
    pass

  def issueRequestToken(self, channelId, otpId):
    """
    Parameters:
     - channelId
     - otpId
    """
    pass

  def issueRequestTokenWithAuthScheme(self, channelId, otpId, authScheme, returnUrl):
    """
    Parameters:
     - channelId
     - otpId
     - authScheme
     - returnUrl
    """
    pass

  def reserveCoinUse(self, request, locale):
    """
    Parameters:
     - request
     - locale
    """
    pass

  def revokeChannel(self, channelId):
    """
    Parameters:
     - channelId
    """
    pass

  def syncChannelData(self, lastSynced, locale):
    """
    Parameters:
     - lastSynced
     - locale
    """
    pass

  def updateChannelNotificationSetting(self, setting):
    """
    Parameters:
     - setting
    """
    pass

  def fetchMessageOperations(self, localRevision, lastOpTimestamp, count):
    """
    Parameters:
     - localRevision
     - lastOpTimestamp
     - count
    """
    pass

  def getLastReadMessageIds(self, chatId):
    """
    Parameters:
     - chatId
    """
    pass

  def multiGetLastReadMessageIds(self, chatIds):
    """
    Parameters:
     - chatIds
    """
    pass

  def buyCoinProduct(self, paymentReservation):
    """
    Parameters:
     - paymentReservation
    """
    pass

  def buyFreeProduct(self, receiverMid, productId, messageTemplate, language, country, packageId):
    """
    Parameters:
     - receiverMid
     - productId
     - messageTemplate
     - language
     - country
     - packageId
    """
    pass

  def buyMustbuyProduct(self, receiverMid, productId, messageTemplate, language, country, packageId, serialNumber):
    """
    Parameters:
     - receiverMid
     - productId
     - messageTemplate
     - language
     - country
     - packageId
     - serialNumber
    """
    pass

  def checkCanReceivePresent(self, recipientMid, packageId, language, country):
    """
    Parameters:
     - recipientMid
     - packageId
     - language
     - country
    """
    pass

  def getActivePurchases(self, start, size, language, country):
    """
    Parameters:
     - start
     - size
     - language
     - country
    """
    pass

  def getActivePurchaseVersions(self, start, size, language, country):
    """
    Parameters:
     - start
     - size
     - language
     - country
    """
    pass

  def getCoinProducts(self, appStoreCode, country, language):
    """
    Parameters:
     - appStoreCode
     - country
     - language
    """
    pass

  def getCoinProductsByPgCode(self, appStoreCode, pgCode, country, language):
    """
    Parameters:
     - appStoreCode
     - pgCode
     - country
     - language
    """
    pass

  def getCoinPurchaseHistory(self, request):
    """
    Parameters:
     - request
    """
    pass

  def getCoinUseAndRefundHistory(self, request):
    """
    Parameters:
     - request
    """
    pass

  def getDownloads(self, start, size, language, country):
    """
    Parameters:
     - start
     - size
     - language
     - country
    """
    pass

  def getEventPackages(self, start, size, language, country):
    """
    Parameters:
     - start
     - size
     - language
     - country
    """
    pass

  def getNewlyReleasedPackages(self, start, size, language, country):
    """
    Parameters:
     - start
     - size
     - language
     - country
    """
    pass

  def getPopularPackages(self, start, size, language, country):
    """
    Parameters:
     - start
     - size
     - language
     - country
    """
    pass

  def getPresentsReceived(self, start, size, language, country):
    """
    Parameters:
     - start
     - size
     - language
     - country
    """
    pass

  def getPresentsSent(self, start, size, language, country):
    """
    Parameters:
     - start
     - size
     - language
     - country
    """
    pass

  def getProduct(self, packageID, language, country):
    """
    Parameters:
     - packageID
     - language
     - country
    """
    pass

  def getProductList(self, productIdList, language, country):
    """
    Parameters:
     - productIdList
     - language
     - country
    """
    pass

  def getProductListWithCarrier(self, productIdList, language, country, carrierCode):
    """
    Parameters:
     - productIdList
     - language
     - country
     - carrierCode
    """
    pass

  def getProductWithCarrier(self, packageID, language, country, carrierCode):
    """
    Parameters:
     - packageID
     - language
     - country
     - carrierCode
    """
    pass

  def getPurchaseHistory(self, start, size, language, country):
    """
    Parameters:
     - start
     - size
     - language
     - country
    """
    pass

  def getTotalBalance(self, appStoreCode):
    """
    Parameters:
     - appStoreCode
    """
    pass

  def notifyDownloaded(self, packageId, language):
    """
    Parameters:
     - packageId
     - language
    """
    pass

  def reserveCoinPurchase(self, request):
    """
    Parameters:
     - request
    """
    pass

  def reservePayment(self, paymentReservation):
    """
    Parameters:
     - paymentReservation
    """
    pass

  def getSnsFriends(self, snsIdType, snsAccessToken, startIdx, limit):
    """
    Parameters:
     - snsIdType
     - snsAccessToken
     - startIdx
     - limit
    """
    pass

  def getSnsMyProfile(self, snsIdType, snsAccessToken):
    """
    Parameters:
     - snsIdType
     - snsAccessToken
    """
    pass

  def postSnsInvitationMessage(self, snsIdType, snsAccessToken, toSnsUserId):
    """
    Parameters:
     - snsIdType
     - snsAccessToken
     - toSnsUserId
    """
    pass

  def acceptGroupInvitation(self, reqSeq, groupId):
    """
    Parameters:
     - reqSeq
     - groupId
    """
    pass

  def acceptGroupInvitationByTicket(self, reqSeq, groupId, ticketId):
    """
    Parameters:
     - reqSeq
     - groupId
     - ticketId
    """
    pass

  def acceptProximityMatches(self, sessionId, ids):
    """
    Parameters:
     - sessionId
     - ids
    """
    pass

  def acquireCallRoute(self, to):
    """
    Parameters:
     - to
    """
    pass

  def acquireCallTicket(self, to):
    """
    Parameters:
     - to
    """
    pass

  def acquireEncryptedAccessToken(self, featureType):
    """
    Parameters:
     - featureType
    """
    pass

  def addSnsId(self, snsIdType, snsAccessToken):
    """
    Parameters:
     - snsIdType
     - snsAccessToken
    """
    pass

  def blockContact(self, reqSeq, id):
    """
    Parameters:
     - reqSeq
     - id
    """
    pass

  def blockRecommendation(self, reqSeq, id):
    """
    Parameters:
     - reqSeq
     - id
    """
    pass

  def cancelGroupInvitation(self, reqSeq, groupId, contactIds):
    """
    Parameters:
     - reqSeq
     - groupId
     - contactIds
    """
    pass

  def changeVerificationMethod(self, sessionId, method):
    """
    Parameters:
     - sessionId
     - method
    """
    pass

  def clearIdentityCredential(self):
    pass

  def clearMessageBox(self, channelId, messageBoxId):
    """
    Parameters:
     - channelId
     - messageBoxId
    """
    pass

  def closeProximityMatch(self, sessionId):
    """
    Parameters:
     - sessionId
    """
    pass

  def commitSendMessage(self, seq, messageId, receiverMids):
    """
    Parameters:
     - seq
     - messageId
     - receiverMids
    """
    pass

  def commitSendMessages(self, seq, messageIds, receiverMids):
    """
    Parameters:
     - seq
     - messageIds
     - receiverMids
    """
    pass

  def commitUpdateProfile(self, seq, attrs, receiverMids):
    """
    Parameters:
     - seq
     - attrs
     - receiverMids
    """
    pass

  def confirmEmail(self, verifier, pinCode):
    """
    Parameters:
     - verifier
     - pinCode
    """
    pass

  def createGroup(self, seq, name, contactIds):
    """
    Parameters:
     - seq
     - name
     - contactIds
    """
    pass

  def createQrcodeBase64Image(self, url, characterSet, imageSize, x, y, width, height):
    """
    Parameters:
     - url
     - characterSet
     - imageSize
     - x
     - y
     - width
     - height
    """
    pass

  def createRoom(self, reqSeq, contactIds):
    """
    Parameters:
     - reqSeq
     - contactIds
    """
    pass

  def createSession(self):
    pass

  def fetchAnnouncements(self, lastFetchedIndex):
    """
    Parameters:
     - lastFetchedIndex
    """
    pass

  def fetchMessages(self, localTs, count):
    """
    Parameters:
     - localTs
     - count
    """
    pass

  def fetchOperations(self, localRev, count):
    """
    Parameters:
     - localRev
     - count
    """
    pass

  def fetchOps(self, localRev, count, globalRev, individualRev):
    """
    Parameters:
     - localRev
     - count
     - globalRev
     - individualRev
    """
    pass

  def findAndAddContactsByEmail(self, reqSeq, emails):
    """
    Parameters:
     - reqSeq
     - emails
    """
    pass

  def findAndAddContactsByMid(self, reqSeq, mid):
    """
    Parameters:
     - reqSeq
     - mid
    """
    pass

  def findAndAddContactsByPhone(self, reqSeq, phones):
    """
    Parameters:
     - reqSeq
     - phones
    """
    pass

  def findAndAddContactsByUserid(self, reqSeq, userid):
    """
    Parameters:
     - reqSeq
     - userid
    """
    pass

  def findContactByUserid(self, userid):
    """
    Parameters:
     - userid
    """
    pass

  def findContactByUserTicket(self, ticketId):
    """
    Parameters:
     - ticketId
    """
    pass

  def findGroupByTicket(self, ticketId):
    """
    Parameters:
     - ticketId
    """
    pass

  def findContactsByEmail(self, emails):
    """
    Parameters:
     - emails
    """
    pass

  def findContactsByPhone(self, phones):
    """
    Parameters:
     - phones
    """
    pass

  def findSnsIdUserStatus(self, snsIdType, snsAccessToken, udidHash):
    """
    Parameters:
     - snsIdType
     - snsAccessToken
     - udidHash
    """
    pass

  def finishUpdateVerification(self, sessionId):
    """
    Parameters:
     - sessionId
    """
    pass

  def generateUserTicket(self, expirationTime, maxUseCount):
    """
    Parameters:
     - expirationTime
     - maxUseCount
    """
    pass

  def getAcceptedProximityMatches(self, sessionId):
    """
    Parameters:
     - sessionId
    """
    pass

  def getActiveBuddySubscriberIds(self):
    pass

  def getAllContactIds(self):
    pass

  def getAuthQrcode(self, keepLoggedIn, systemName):
    """
    Parameters:
     - keepLoggedIn
     - systemName
    """
    pass

  def getBlockedContactIds(self):
    pass

  def getBlockedContactIdsByRange(self, start, count):
    """
    Parameters:
     - start
     - count
    """
    pass

  def getBlockedRecommendationIds(self):
    pass

  def getBuddyBlockerIds(self):
    pass

  def getBuddyLocation(self, mid, index):
    """
    Parameters:
     - mid
     - index
    """
    pass

  def getCompactContactsModifiedSince(self, timestamp):
    """
    Parameters:
     - timestamp
    """
    pass

  def getCompactGroup(self, groupId):
    """
    Parameters:
     - groupId
    """
    pass

  def getCompactRoom(self, roomId):
    """
    Parameters:
     - roomId
    """
    pass

  def getContact(self, id):
    """
    Parameters:
     - id
    """
    pass

  def getContacts(self, ids):
    """
    Parameters:
     - ids
    """
    pass

  def getCountryWithRequestIp(self):
    pass

  def getFavoriteMids(self):
    pass

  def getGroup(self, groupId):
    """
    Parameters:
     - groupId
    """
    pass

  def getGroupIdsInvited(self):
    pass

  def getGroupIdsJoined(self):
    pass

  def getGroups(self, groupIds):
    """
    Parameters:
     - groupIds
    """
    pass

  def getHiddenContactMids(self):
    pass

  def getIdentityIdentifier(self):
    pass

  def getLastAnnouncementIndex(self):
    pass

  def getLastOpRevision(self):
    pass

  def getMessageBox(self, channelId, messageBoxId, lastMessagesCount):
    """
    Parameters:
     - channelId
     - messageBoxId
     - lastMessagesCount
    """
    pass

  def getMessageBoxCompactWrapUp(self, mid):
    """
    Parameters:
     - mid
    """
    pass

  def getMessageBoxCompactWrapUpList(self, start, messageBoxCount):
    """
    Parameters:
     - start
     - messageBoxCount
    """
    pass

  def getMessageBoxList(self, channelId, lastMessagesCount):
    """
    Parameters:
     - channelId
     - lastMessagesCount
    """
    pass

  def getMessageBoxListByStatus(self, channelId, lastMessagesCount, status):
    """
    Parameters:
     - channelId
     - lastMessagesCount
     - status
    """
    pass

  def getMessageBoxWrapUp(self, mid):
    """
    Parameters:
     - mid
    """
    pass

  def getMessageBoxWrapUpList(self, start, messageBoxCount):
    """
    Parameters:
     - start
     - messageBoxCount
    """
    pass

  def getMessagesBySequenceNumber(self, channelId, messageBoxId, startSeq, endSeq):
    """
    Parameters:
     - channelId
     - messageBoxId
     - startSeq
     - endSeq
    """
    pass

  def getNextMessages(self, messageBoxId, startSeq, messagesCount):
    """
    Parameters:
     - messageBoxId
     - startSeq
     - messagesCount
    """
    pass

  def getNotificationPolicy(self, carrier):
    """
    Parameters:
     - carrier
    """
    pass

  def getPreviousMessages(self, messageBoxId, endSeq, messagesCount):
    """
    Parameters:
     - messageBoxId
     - endSeq
     - messagesCount
    """
    pass

  def getProfile(self):
    pass

  def getProximityMatchCandidateList(self, sessionId):
    """
    Parameters:
     - sessionId
    """
    pass

  def getProximityMatchCandidates(self, sessionId):
    """
    Parameters:
     - sessionId
    """
    pass

  def getRecentMessages(self, messageBoxId, messagesCount):
    """
    Parameters:
     - messageBoxId
     - messagesCount
    """
    pass

  def getRecommendationIds(self):
    pass

  def getRoom(self, roomId):
    """
    Parameters:
     - roomId
    """
    pass

  def getRSAKeyInfo(self, provider):
    """
    Parameters:
     - provider
    """
    pass

  def getServerTime(self):
    pass

  def getSessions(self):
    pass

  def getSettings(self):
    pass

  def getSettingsAttributes(self, attrBitset):
    """
    Parameters:
     - attrBitset
    """
    pass

  def getSystemConfiguration(self):
    pass

  def getUserTicket(self):
    pass

  def getWapInvitation(self, invitationHash):
    """
    Parameters:
     - invitationHash
    """
    pass

  def invalidateUserTicket(self):
    pass

  def inviteFriendsBySms(self, phoneNumberList):
    """
    Parameters:
     - phoneNumberList
    """
    pass

  def inviteIntoGroup(self, reqSeq, groupId, contactIds):
    """
    Parameters:
     - reqSeq
     - groupId
     - contactIds
    """
    pass

  def inviteIntoRoom(self, reqSeq, roomId, contactIds):
    """
    Parameters:
     - reqSeq
     - roomId
     - contactIds
    """
    pass

  def inviteViaEmail(self, reqSeq, email, name):
    """
    Parameters:
     - reqSeq
     - email
     - name
    """
    pass

  def isIdentityIdentifierAvailable(self, provider, identifier):
    """
    Parameters:
     - provider
     - identifier
    """
    pass

  def isUseridAvailable(self, userid):
    """
    Parameters:
     - userid
    """
    pass

  def kickoutFromGroup(self, reqSeq, groupId, contactIds):
    """
    Parameters:
     - reqSeq
     - groupId
     - contactIds
    """
    pass

  def leaveGroup(self, reqSeq, groupId):
    """
    Parameters:
     - reqSeq
     - groupId
    """
    pass

  def leaveRoom(self, reqSeq, roomId):
    """
    Parameters:
     - reqSeq
     - roomId
    """
    pass

  def loginWithIdentityCredential(self, identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate):
    """
    Parameters:
     - identityProvider
     - identifier
     - password
     - keepLoggedIn
     - accessLocation
     - systemName
     - certificate
    """
    pass

  def loginWithIdentityCredentialForCertificate(self, identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate):
    """
    Parameters:
     - identityProvider
     - identifier
     - password
     - keepLoggedIn
     - accessLocation
     - systemName
     - certificate
    """
    pass

  def loginWithVerifier(self, verifier):
    """
    Parameters:
     - verifier
    """
    pass

  def loginWithVerifierForCerificate(self, verifier):
    """
    Parameters:
     - verifier
    """
    pass

  def loginWithVerifierForCertificate(self, verifier):
    """
    Parameters:
     - verifier
    """
    pass

  def logout(self):
    pass

  def logoutSession(self, tokenKey):
    """
    Parameters:
     - tokenKey
    """
    pass

  def noop(self):
    pass

  def notifiedRedirect(self, paramMap):
    """
    Parameters:
     - paramMap
    """
    pass

  def notifyBuddyOnAir(self, seq, receiverMids):
    """
    Parameters:
     - seq
     - receiverMids
    """
    pass

  def notifyIndividualEvent(self, notificationStatus, receiverMids):
    """
    Parameters:
     - notificationStatus
     - receiverMids
    """
    pass

  def notifyInstalled(self, udidHash, applicationTypeWithExtensions):
    """
    Parameters:
     - udidHash
     - applicationTypeWithExtensions
    """
    pass

  def notifyRegistrationComplete(self, udidHash, applicationTypeWithExtensions):
    """
    Parameters:
     - udidHash
     - applicationTypeWithExtensions
    """
    pass

  def notifySleep(self, lastRev, badge):
    """
    Parameters:
     - lastRev
     - badge
    """
    pass

  def notifyUpdated(self, lastRev, deviceInfo):
    """
    Parameters:
     - lastRev
     - deviceInfo
    """
    pass

  def openProximityMatch(self, location):
    """
    Parameters:
     - location
    """
    pass

  def registerBuddyUser(self, buddyId, registrarPassword):
    """
    Parameters:
     - buddyId
     - registrarPassword
    """
    pass

  def registerBuddyUserid(self, seq, userid):
    """
    Parameters:
     - seq
     - userid
    """
    pass

  def registerDevice(self, sessionId):
    """
    Parameters:
     - sessionId
    """
    pass

  def registerDeviceWithIdentityCredential(self, sessionId, provider, identifier, verifier):
    """
    Parameters:
     - sessionId
     - provider
     - identifier
     - verifier
    """
    pass

  def registerDeviceWithoutPhoneNumber(self, region, udidHash, deviceInfo):
    """
    Parameters:
     - region
     - udidHash
     - deviceInfo
    """
    pass

  def registerDeviceWithoutPhoneNumberWithIdentityCredential(self, region, udidHash, deviceInfo, provider, identifier, verifier, mid):
    """
    Parameters:
     - region
     - udidHash
     - deviceInfo
     - provider
     - identifier
     - verifier
     - mid
    """
    pass

  def registerUserid(self, reqSeq, userid):
    """
    Parameters:
     - reqSeq
     - userid
    """
    pass

  def registerWapDevice(self, invitationHash, guidHash, email, deviceInfo):
    """
    Parameters:
     - invitationHash
     - guidHash
     - email
     - deviceInfo
    """
    pass

  def registerWithExistingSnsIdAndIdentityCredential(self, identityCredential, region, udidHash, deviceInfo):
    """
    Parameters:
     - identityCredential
     - region
     - udidHash
     - deviceInfo
    """
    pass

  def registerWithSnsId(self, snsIdType, snsAccessToken, region, udidHash, deviceInfo, mid):
    """
    Parameters:
     - snsIdType
     - snsAccessToken
     - region
     - udidHash
     - deviceInfo
     - mid
    """
    pass

  def registerWithSnsIdAndIdentityCredential(self, snsIdType, snsAccessToken, identityCredential, region, udidHash, deviceInfo):
    """
    Parameters:
     - snsIdType
     - snsAccessToken
     - identityCredential
     - region
     - udidHash
     - deviceInfo
    """
    pass

  def reissueDeviceCredential(self):
    pass

  def reissueUserTicket(self, expirationTime, maxUseCount):
    """
    Parameters:
     - expirationTime
     - maxUseCount
    """
    pass

  def reissueGroupTicket(self, groupId):
    """
    Parameters:
     - groupId
    """
    pass

  def rejectGroupInvitation(self, reqSeq, groupId):
    """
    Parameters:
     - reqSeq
     - groupId
    """
    pass

  def releaseSession(self):
    pass

  def removeAllMessages(self, seq, lastMessageId):
    """
    Parameters:
     - seq
     - lastMessageId
    """
    pass

  def removeBuddyLocation(self, mid, index):
    """
    Parameters:
     - mid
     - index
    """
    pass

  def removeMessage(self, messageId):
    """
    Parameters:
     - messageId
    """
    pass

  def removeMessageFromMyHome(self, messageId):
    """
    Parameters:
     - messageId
    """
    pass

  def removeSnsId(self, snsIdType):
    """
    Parameters:
     - snsIdType
    """
    pass

  def report(self, syncOpRevision, category, report):
    """
    Parameters:
     - syncOpRevision
     - category
     - report
    """
    pass

  def reportContacts(self, syncOpRevision, category, contactReports, actionType):
    """
    Parameters:
     - syncOpRevision
     - category
     - contactReports
     - actionType
    """
    pass

  def reportGroups(self, syncOpRevision, groups):
    """
    Parameters:
     - syncOpRevision
     - groups
    """
    pass

  def reportProfile(self, syncOpRevision, profile):
    """
    Parameters:
     - syncOpRevision
     - profile
    """
    pass

  def reportRooms(self, syncOpRevision, rooms):
    """
    Parameters:
     - syncOpRevision
     - rooms
    """
    pass

  def reportSettings(self, syncOpRevision, settings):
    """
    Parameters:
     - syncOpRevision
     - settings
    """
    pass

  def reportSpammer(self, spammerMid, spammerReasons, spamMessageIds):
    """
    Parameters:
     - spammerMid
     - spammerReasons
     - spamMessageIds
    """
    pass

  def requestAccountPasswordReset(self, provider, identifier, locale):
    """
    Parameters:
     - provider
     - identifier
     - locale
    """
    pass

  def requestEmailConfirmation(self, emailConfirmation):
    """
    Parameters:
     - emailConfirmation
    """
    pass

  def requestIdentityUnbind(self, provider, identifier):
    """
    Parameters:
     - provider
     - identifier
    """
    pass

  def resendEmailConfirmation(self, verifier):
    """
    Parameters:
     - verifier
    """
    pass

  def resendPinCode(self, sessionId):
    """
    Parameters:
     - sessionId
    """
    pass

  def resendPinCodeBySMS(self, sessionId):
    """
    Parameters:
     - sessionId
    """
    pass

  def sendChatChecked(self, seq, consumer, lastMessageId):
    """
    Parameters:
     - seq
     - consumer
     - lastMessageId
    """
    pass

  def sendChatRemoved(self, seq, consumer, lastMessageId):
    """
    Parameters:
     - seq
     - consumer
     - lastMessageId
    """
    pass

  def sendContentPreviewUpdated(self, esq, messageId, receiverMids):
    """
    Parameters:
     - esq
     - messageId
     - receiverMids
    """
    pass

  def sendContentReceipt(self, seq, consumer, messageId):
    """
    Parameters:
     - seq
     - consumer
     - messageId
    """
    pass

  def sendDummyPush(self):
    pass

  def sendEvent(self, seq, message):
    """
    Parameters:
     - seq
     - message
    """
    pass

  def sendMessage(self, seq, message):
    """
    Parameters:
     - seq
     - message
    """
    pass

  def sendMessageIgnored(self, seq, consumer, messageIds):
    """
    Parameters:
     - seq
     - consumer
     - messageIds
    """
    pass

  def sendMessageReceipt(self, seq, consumer, messageIds):
    """
    Parameters:
     - seq
     - consumer
     - messageIds
    """
    pass

  def sendMessageToMyHome(self, seq, message):
    """
    Parameters:
     - seq
     - message
    """
    pass

  def setBuddyLocation(self, mid, index, location):
    """
    Parameters:
     - mid
     - index
     - location
    """
    pass

  def setIdentityCredential(self, provider, identifier, verifier):
    """
    Parameters:
     - provider
     - identifier
     - verifier
    """
    pass

  def setNotificationsEnabled(self, reqSeq, type, target, enablement):
    """
    Parameters:
     - reqSeq
     - type
     - target
     - enablement
    """
    pass

  def startUpdateVerification(self, region, carrier, phone, udidHash, deviceInfo, networkCode, locale):
    """
    Parameters:
     - region
     - carrier
     - phone
     - udidHash
     - deviceInfo
     - networkCode
     - locale
    """
    pass

  def startVerification(self, region, carrier, phone, udidHash, deviceInfo, networkCode, mid, locale):
    """
    Parameters:
     - region
     - carrier
     - phone
     - udidHash
     - deviceInfo
     - networkCode
     - mid
     - locale
    """
    pass

  def storeUpdateProfileAttribute(self, seq, profileAttribute, value):
    """
    Parameters:
     - seq
     - profileAttribute
     - value
    """
    pass

  def syncContactBySnsIds(self, reqSeq, modifications):
    """
    Parameters:
     - reqSeq
     - modifications
    """
    pass

  def syncContacts(self, reqSeq, localContacts):
    """
    Parameters:
     - reqSeq
     - localContacts
    """
    pass

  def trySendMessage(self, seq, message):
    """
    Parameters:
     - seq
     - message
    """
    pass

  def unblockContact(self, reqSeq, id):
    """
    Parameters:
     - reqSeq
     - id
    """
    pass

  def unblockRecommendation(self, reqSeq, id):
    """
    Parameters:
     - reqSeq
     - id
    """
    pass

  def unregisterUserAndDevice(self):
    pass

  def updateApnsDeviceToken(self, apnsDeviceToken):
    """
    Parameters:
     - apnsDeviceToken
    """
    pass

  def updateBuddySetting(self, key, value):
    """
    Parameters:
     - key
     - value
    """
    pass

  def updateC2DMRegistrationId(self, registrationId):
    """
    Parameters:
     - registrationId
    """
    pass

  def updateContactSetting(self, reqSeq, mid, flag, value):
    """
    Parameters:
     - reqSeq
     - mid
     - flag
     - value
    """
    pass

  def updateCustomModeSettings(self, customMode, paramMap):
    """
    Parameters:
     - customMode
     - paramMap
    """
    pass

  def updateDeviceInfo(self, deviceUid, deviceInfo):
    """
    Parameters:
     - deviceUid
     - deviceInfo
    """
    pass

  def updateGroup(self, reqSeq, group):
    """
    Parameters:
     - reqSeq
     - group
    """
    pass

  def updateNotificationToken(self, type, token):
    """
    Parameters:
     - type
     - token
    """
    pass

  def updateNotificationTokenWithBytes(self, type, token):
    """
    Parameters:
     - type
     - token
    """
    pass

  def updateProfile(self, reqSeq, profile):
    """
    Parameters:
     - reqSeq
     - profile
    """
    pass

  def updateProfileAttribute(self, reqSeq, attr, value):
    """
    Parameters:
     - reqSeq
     - attr
     - value
    """
    pass

  def updateRegion(self, region):
    """
    Parameters:
     - region
    """
    pass

  def updateSettings(self, reqSeq, settings):
    """
    Parameters:
     - reqSeq
     - settings
    """
    pass

  def updateSettings2(self, reqSeq, settings):
    """
    Parameters:
     - reqSeq
     - settings
    """
    pass

  def updateSettingsAttribute(self, reqSeq, attr, value):
    """
    Parameters:
     - reqSeq
     - attr
     - value
    """
    pass

  def updateSettingsAttributes(self, reqSeq, attrBitset, settings):
    """
    Parameters:
     - reqSeq
     - attrBitset
     - settings
    """
    pass

  def verifyIdentityCredential(self, identityProvider, identifier, password):
    """
    Parameters:
     - identityProvider
     - identifier
     - password
    """
    pass

  def verifyIdentityCredentialWithResult(self, identityCredential):
    """
    Parameters:
     - identityCredential
    """
    pass

  def verifyPhone(self, sessionId, pinCode, udidHash):
    """
    Parameters:
     - sessionId
     - pinCode
     - udidHash
    """
    pass

  def verifyQrcode(self, verifier, pinCode):
    """
    Parameters:
     - verifier
     - pinCode
    """
    pass

  def notify(self, event):
    """
    Parameters:
     - event
    """
    pass

  def loginZ(self, req):
    """
    Parameters:
    - req
    """
    pass

class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def getRSAKey(self):
    self.send_getRSAKey()
    return self.recv_getRSAKey()

  def send_getRSAKey(self):
    self._oprot.writeMessageBegin('getRSAKey', TMessageType.CALL, self._seqid)
    args = getRSAKey_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getRSAKey(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getRSAKey_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getRSAKey failed: unknown result")

  def notifyEmailConfirmationResult(self, parameterMap):
    """
    Parameters:
     - parameterMap
    """
    self.send_notifyEmailConfirmationResult(parameterMap)
    self.recv_notifyEmailConfirmationResult()

  def send_notifyEmailConfirmationResult(self, parameterMap):
    self._oprot.writeMessageBegin('notifyEmailConfirmationResult', TMessageType.CALL, self._seqid)
    args = notifyEmailConfirmationResult_args()
    args.parameterMap = parameterMap
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_notifyEmailConfirmationResult(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = notifyEmailConfirmationResult_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def registerVirtualAccount(self, locale, encryptedVirtualUserId, encryptedPassword):
    """
    Parameters:
     - locale
     - encryptedVirtualUserId
     - encryptedPassword
    """
    self.send_registerVirtualAccount(locale, encryptedVirtualUserId, encryptedPassword)
    return self.recv_registerVirtualAccount()

  def send_registerVirtualAccount(self, locale, encryptedVirtualUserId, encryptedPassword):
    self._oprot.writeMessageBegin('registerVirtualAccount', TMessageType.CALL, self._seqid)
    args = registerVirtualAccount_args()
    args.locale = locale
    args.encryptedVirtualUserId = encryptedVirtualUserId
    args.encryptedPassword = encryptedPassword
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_registerVirtualAccount(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = registerVirtualAccount_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "registerVirtualAccount failed: unknown result")

  def requestVirtualAccountPasswordChange(self, virtualMid, encryptedVirtualUserId, encryptedOldPassword, encryptedNewPassword):
    """
    Parameters:
     - virtualMid
     - encryptedVirtualUserId
     - encryptedOldPassword
     - encryptedNewPassword
    """
    self.send_requestVirtualAccountPasswordChange(virtualMid, encryptedVirtualUserId, encryptedOldPassword, encryptedNewPassword)
    self.recv_requestVirtualAccountPasswordChange()

  def send_requestVirtualAccountPasswordChange(self, virtualMid, encryptedVirtualUserId, encryptedOldPassword, encryptedNewPassword):
    self._oprot.writeMessageBegin('requestVirtualAccountPasswordChange', TMessageType.CALL, self._seqid)
    args = requestVirtualAccountPasswordChange_args()
    args.virtualMid = virtualMid
    args.encryptedVirtualUserId = encryptedVirtualUserId
    args.encryptedOldPassword = encryptedOldPassword
    args.encryptedNewPassword = encryptedNewPassword
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_requestVirtualAccountPasswordChange(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = requestVirtualAccountPasswordChange_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def requestVirtualAccountPasswordSet(self, virtualMid, encryptedVirtualUserId, encryptedNewPassword):
    """
    Parameters:
     - virtualMid
     - encryptedVirtualUserId
     - encryptedNewPassword
    """
    self.send_requestVirtualAccountPasswordSet(virtualMid, encryptedVirtualUserId, encryptedNewPassword)
    self.recv_requestVirtualAccountPasswordSet()

  def send_requestVirtualAccountPasswordSet(self, virtualMid, encryptedVirtualUserId, encryptedNewPassword):
    self._oprot.writeMessageBegin('requestVirtualAccountPasswordSet', TMessageType.CALL, self._seqid)
    args = requestVirtualAccountPasswordSet_args()
    args.virtualMid = virtualMid
    args.encryptedVirtualUserId = encryptedVirtualUserId
    args.encryptedNewPassword = encryptedNewPassword
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_requestVirtualAccountPasswordSet(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = requestVirtualAccountPasswordSet_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def unregisterVirtualAccount(self, virtualMid):
    """
    Parameters:
     - virtualMid
    """
    self.send_unregisterVirtualAccount(virtualMid)
    self.recv_unregisterVirtualAccount()

  def send_unregisterVirtualAccount(self, virtualMid):
    self._oprot.writeMessageBegin('unregisterVirtualAccount', TMessageType.CALL, self._seqid)
    args = unregisterVirtualAccount_args()
    args.virtualMid = virtualMid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_unregisterVirtualAccount(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = unregisterVirtualAccount_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def checkUserAge(self, carrier, sessionId, verifier, standardAge):
    """
    Parameters:
     - carrier
     - sessionId
     - verifier
     - standardAge
    """
    self.send_checkUserAge(carrier, sessionId, verifier, standardAge)
    return self.recv_checkUserAge()

  def send_checkUserAge(self, carrier, sessionId, verifier, standardAge):
    self._oprot.writeMessageBegin('checkUserAge', TMessageType.CALL, self._seqid)
    args = checkUserAge_args()
    args.carrier = carrier
    args.sessionId = sessionId
    args.verifier = verifier
    args.standardAge = standardAge
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_checkUserAge(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = checkUserAge_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "checkUserAge failed: unknown result")

  def checkUserAgeWithDocomo(self, openIdRedirectUrl, standardAge, verifier):
    """
    Parameters:
     - openIdRedirectUrl
     - standardAge
     - verifier
    """
    self.send_checkUserAgeWithDocomo(openIdRedirectUrl, standardAge, verifier)
    return self.recv_checkUserAgeWithDocomo()

  def send_checkUserAgeWithDocomo(self, openIdRedirectUrl, standardAge, verifier):
    self._oprot.writeMessageBegin('checkUserAgeWithDocomo', TMessageType.CALL, self._seqid)
    args = checkUserAgeWithDocomo_args()
    args.openIdRedirectUrl = openIdRedirectUrl
    args.standardAge = standardAge
    args.verifier = verifier
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_checkUserAgeWithDocomo(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = checkUserAgeWithDocomo_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "checkUserAgeWithDocomo failed: unknown result")

  def retrieveOpenIdAuthUrlWithDocomo(self):
    self.send_retrieveOpenIdAuthUrlWithDocomo()
    return self.recv_retrieveOpenIdAuthUrlWithDocomo()

  def send_retrieveOpenIdAuthUrlWithDocomo(self):
    self._oprot.writeMessageBegin('retrieveOpenIdAuthUrlWithDocomo', TMessageType.CALL, self._seqid)
    args = retrieveOpenIdAuthUrlWithDocomo_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_retrieveOpenIdAuthUrlWithDocomo(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = retrieveOpenIdAuthUrlWithDocomo_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "retrieveOpenIdAuthUrlWithDocomo failed: unknown result")

  def retrieveRequestToken(self, carrier):
    """
    Parameters:
     - carrier
    """
    self.send_retrieveRequestToken(carrier)
    return self.recv_retrieveRequestToken()

  def send_retrieveRequestToken(self, carrier):
    self._oprot.writeMessageBegin('retrieveRequestToken', TMessageType.CALL, self._seqid)
    args = retrieveRequestToken_args()
    args.carrier = carrier
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_retrieveRequestToken(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = retrieveRequestToken_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "retrieveRequestToken failed: unknown result")

  def addBuddyMember(self, requestId, userMid):
    """
    Parameters:
     - requestId
     - userMid
    """
    self.send_addBuddyMember(requestId, userMid)
    self.recv_addBuddyMember()

  def send_addBuddyMember(self, requestId, userMid):
    self._oprot.writeMessageBegin('addBuddyMember', TMessageType.CALL, self._seqid)
    args = addBuddyMember_args()
    args.requestId = requestId
    args.userMid = userMid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addBuddyMember(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = addBuddyMember_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def addBuddyMembers(self, requestId, userMids):
    """
    Parameters:
     - requestId
     - userMids
    """
    self.send_addBuddyMembers(requestId, userMids)
    self.recv_addBuddyMembers()

  def send_addBuddyMembers(self, requestId, userMids):
    self._oprot.writeMessageBegin('addBuddyMembers', TMessageType.CALL, self._seqid)
    args = addBuddyMembers_args()
    args.requestId = requestId
    args.userMids = userMids
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addBuddyMembers(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = addBuddyMembers_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def blockBuddyMember(self, requestId, mid):
    """
    Parameters:
     - requestId
     - mid
    """
    self.send_blockBuddyMember(requestId, mid)
    self.recv_blockBuddyMember()

  def send_blockBuddyMember(self, requestId, mid):
    self._oprot.writeMessageBegin('blockBuddyMember', TMessageType.CALL, self._seqid)
    args = blockBuddyMember_args()
    args.requestId = requestId
    args.mid = mid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_blockBuddyMember(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = blockBuddyMember_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def commitSendMessagesToAll(self, requestIdList):
    """
    Parameters:
     - requestIdList
    """
    self.send_commitSendMessagesToAll(requestIdList)
    return self.recv_commitSendMessagesToAll()

  def send_commitSendMessagesToAll(self, requestIdList):
    self._oprot.writeMessageBegin('commitSendMessagesToAll', TMessageType.CALL, self._seqid)
    args = commitSendMessagesToAll_args()
    args.requestIdList = requestIdList
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_commitSendMessagesToAll(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = commitSendMessagesToAll_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "commitSendMessagesToAll failed: unknown result")

  def commitSendMessagesTomids(self, requestIdList, mids):
    """
    Parameters:
     - requestIdList
     - mids
    """
    self.send_commitSendMessagesTomids(requestIdList, mids)
    return self.recv_commitSendMessagesTomids()

  def send_commitSendMessagesTomids(self, requestIdList, mids):
    self._oprot.writeMessageBegin('commitSendMessagesTomids', TMessageType.CALL, self._seqid)
    args = commitSendMessagesTomids_args()
    args.requestIdList = requestIdList
    args.mids = mids
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_commitSendMessagesTomids(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = commitSendMessagesTomids_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "commitSendMessagesTomids failed: unknown result")

  def containsBuddyMember(self, requestId, userMid):
    """
    Parameters:
     - requestId
     - userMid
    """
    self.send_containsBuddyMember(requestId, userMid)
    return self.recv_containsBuddyMember()

  def send_containsBuddyMember(self, requestId, userMid):
    self._oprot.writeMessageBegin('containsBuddyMember', TMessageType.CALL, self._seqid)
    args = containsBuddyMember_args()
    args.requestId = requestId
    args.userMid = userMid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_containsBuddyMember(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = containsBuddyMember_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "containsBuddyMember failed: unknown result")

  def downloadMessageContent(self, requestId, messageId):
    """
    Parameters:
     - requestId
     - messageId
    """
    self.send_downloadMessageContent(requestId, messageId)
    return self.recv_downloadMessageContent()

  def send_downloadMessageContent(self, requestId, messageId):
    self._oprot.writeMessageBegin('downloadMessageContent', TMessageType.CALL, self._seqid)
    args = downloadMessageContent_args()
    args.requestId = requestId
    args.messageId = messageId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_downloadMessageContent(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = downloadMessageContent_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "downloadMessageContent failed: unknown result")

  def downloadMessageContentPreview(self, requestId, messageId):
    """
    Parameters:
     - requestId
     - messageId
    """
    self.send_downloadMessageContentPreview(requestId, messageId)
    return self.recv_downloadMessageContentPreview()

  def send_downloadMessageContentPreview(self, requestId, messageId):
    self._oprot.writeMessageBegin('downloadMessageContentPreview', TMessageType.CALL, self._seqid)
    args = downloadMessageContentPreview_args()
    args.requestId = requestId
    args.messageId = messageId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_downloadMessageContentPreview(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = downloadMessageContentPreview_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "downloadMessageContentPreview failed: unknown result")

  def downloadProfileImage(self, requestId):
    """
    Parameters:
     - requestId
    """
    self.send_downloadProfileImage(requestId)
    return self.recv_downloadProfileImage()

  def send_downloadProfileImage(self, requestId):
    self._oprot.writeMessageBegin('downloadProfileImage', TMessageType.CALL, self._seqid)
    args = downloadProfileImage_args()
    args.requestId = requestId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_downloadProfileImage(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = downloadProfileImage_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "downloadProfileImage failed: unknown result")

  def downloadProfileImagePreview(self, requestId):
    """
    Parameters:
     - requestId
    """
    self.send_downloadProfileImagePreview(requestId)
    return self.recv_downloadProfileImagePreview()

  def send_downloadProfileImagePreview(self, requestId):
    self._oprot.writeMessageBegin('downloadProfileImagePreview', TMessageType.CALL, self._seqid)
    args = downloadProfileImagePreview_args()
    args.requestId = requestId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_downloadProfileImagePreview(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = downloadProfileImagePreview_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "downloadProfileImagePreview failed: unknown result")

  def getActiveMemberCountByBuddyMid(self, buddyMid):
    """
    Parameters:
     - buddyMid
    """
    self.send_getActiveMemberCountByBuddyMid(buddyMid)
    return self.recv_getActiveMemberCountByBuddyMid()

  def send_getActiveMemberCountByBuddyMid(self, buddyMid):
    self._oprot.writeMessageBegin('getActiveMemberCountByBuddyMid', TMessageType.CALL, self._seqid)
    args = getActiveMemberCountByBuddyMid_args()
    args.buddyMid = buddyMid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getActiveMemberCountByBuddyMid(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getActiveMemberCountByBuddyMid_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getActiveMemberCountByBuddyMid failed: unknown result")

  def getActiveMemberMidsByBuddyMid(self, buddyMid):
    """
    Parameters:
     - buddyMid
    """
    self.send_getActiveMemberMidsByBuddyMid(buddyMid)
    return self.recv_getActiveMemberMidsByBuddyMid()

  def send_getActiveMemberMidsByBuddyMid(self, buddyMid):
    self._oprot.writeMessageBegin('getActiveMemberMidsByBuddyMid', TMessageType.CALL, self._seqid)
    args = getActiveMemberMidsByBuddyMid_args()
    args.buddyMid = buddyMid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getActiveMemberMidsByBuddyMid(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getActiveMemberMidsByBuddyMid_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getActiveMemberMidsByBuddyMid failed: unknown result")

  def getAllBuddyMembers(self):
    self.send_getAllBuddyMembers()
    return self.recv_getAllBuddyMembers()

  def send_getAllBuddyMembers(self):
    self._oprot.writeMessageBegin('getAllBuddyMembers', TMessageType.CALL, self._seqid)
    args = getAllBuddyMembers_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAllBuddyMembers(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getAllBuddyMembers_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllBuddyMembers failed: unknown result")

  def getBlockedBuddyMembers(self):
    self.send_getBlockedBuddyMembers()
    return self.recv_getBlockedBuddyMembers()

  def send_getBlockedBuddyMembers(self):
    self._oprot.writeMessageBegin('getBlockedBuddyMembers', TMessageType.CALL, self._seqid)
    args = getBlockedBuddyMembers_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getBlockedBuddyMembers(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getBlockedBuddyMembers_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getBlockedBuddyMembers failed: unknown result")

  def getBlockerCountByBuddyMid(self, buddyMid):
    """
    Parameters:
     - buddyMid
    """
    self.send_getBlockerCountByBuddyMid(buddyMid)
    return self.recv_getBlockerCountByBuddyMid()

  def send_getBlockerCountByBuddyMid(self, buddyMid):
    self._oprot.writeMessageBegin('getBlockerCountByBuddyMid', TMessageType.CALL, self._seqid)
    args = getBlockerCountByBuddyMid_args()
    args.buddyMid = buddyMid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getBlockerCountByBuddyMid(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getBlockerCountByBuddyMid_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getBlockerCountByBuddyMid failed: unknown result")

  def getBuddyDetailByMid(self, buddyMid):
    """
    Parameters:
     - buddyMid
    """
    self.send_getBuddyDetailByMid(buddyMid)
    return self.recv_getBuddyDetailByMid()

  def send_getBuddyDetailByMid(self, buddyMid):
    self._oprot.writeMessageBegin('getBuddyDetailByMid', TMessageType.CALL, self._seqid)
    args = getBuddyDetailByMid_args()
    args.buddyMid = buddyMid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getBuddyDetailByMid(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getBuddyDetailByMid_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getBuddyDetailByMid failed: unknown result")

  def getBuddyProfile(self):
    self.send_getBuddyProfile()
    return self.recv_getBuddyProfile()

  def send_getBuddyProfile(self):
    self._oprot.writeMessageBegin('getBuddyProfile', TMessageType.CALL, self._seqid)
    args = getBuddyProfile_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getBuddyProfile(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getBuddyProfile_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getBuddyProfile failed: unknown result")

  def getContactTicket(self):
    self.send_getContactTicket()
    return self.recv_getContactTicket()

  def send_getContactTicket(self):
    self._oprot.writeMessageBegin('getContactTicket', TMessageType.CALL, self._seqid)
    args = getContactTicket_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getContactTicket(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getContactTicket_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getContactTicket failed: unknown result")

  def getMemberCountByBuddyMid(self, buddyMid):
    """
    Parameters:
     - buddyMid
    """
    self.send_getMemberCountByBuddyMid(buddyMid)
    return self.recv_getMemberCountByBuddyMid()

  def send_getMemberCountByBuddyMid(self, buddyMid):
    self._oprot.writeMessageBegin('getMemberCountByBuddyMid', TMessageType.CALL, self._seqid)
    args = getMemberCountByBuddyMid_args()
    args.buddyMid = buddyMid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getMemberCountByBuddyMid(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getMemberCountByBuddyMid_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getMemberCountByBuddyMid failed: unknown result")

  def getSendBuddyMessageResult(self, sendBuddyMessageRequestId):
    """
    Parameters:
     - sendBuddyMessageRequestId
    """
    self.send_getSendBuddyMessageResult(sendBuddyMessageRequestId)
    return self.recv_getSendBuddyMessageResult()

  def send_getSendBuddyMessageResult(self, sendBuddyMessageRequestId):
    self._oprot.writeMessageBegin('getSendBuddyMessageResult', TMessageType.CALL, self._seqid)
    args = getSendBuddyMessageResult_args()
    args.sendBuddyMessageRequestId = sendBuddyMessageRequestId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getSendBuddyMessageResult(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getSendBuddyMessageResult_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getSendBuddyMessageResult failed: unknown result")

  def getSetBuddyOnAirResult(self, setBuddyOnAirRequestId):
    """
    Parameters:
     - setBuddyOnAirRequestId
    """
    self.send_getSetBuddyOnAirResult(setBuddyOnAirRequestId)
    return self.recv_getSetBuddyOnAirResult()

  def send_getSetBuddyOnAirResult(self, setBuddyOnAirRequestId):
    self._oprot.writeMessageBegin('getSetBuddyOnAirResult', TMessageType.CALL, self._seqid)
    args = getSetBuddyOnAirResult_args()
    args.setBuddyOnAirRequestId = setBuddyOnAirRequestId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getSetBuddyOnAirResult(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getSetBuddyOnAirResult_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getSetBuddyOnAirResult failed: unknown result")

  def getUpdateBuddyProfileResult(self, updateBuddyProfileRequestId):
    """
    Parameters:
     - updateBuddyProfileRequestId
    """
    self.send_getUpdateBuddyProfileResult(updateBuddyProfileRequestId)
    return self.recv_getUpdateBuddyProfileResult()

  def send_getUpdateBuddyProfileResult(self, updateBuddyProfileRequestId):
    self._oprot.writeMessageBegin('getUpdateBuddyProfileResult', TMessageType.CALL, self._seqid)
    args = getUpdateBuddyProfileResult_args()
    args.updateBuddyProfileRequestId = updateBuddyProfileRequestId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getUpdateBuddyProfileResult(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getUpdateBuddyProfileResult_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getUpdateBuddyProfileResult failed: unknown result")

  def isBuddyOnAirByMid(self, buddyMid):
    """
    Parameters:
     - buddyMid
    """
    self.send_isBuddyOnAirByMid(buddyMid)
    return self.recv_isBuddyOnAirByMid()

  def send_isBuddyOnAirByMid(self, buddyMid):
    self._oprot.writeMessageBegin('isBuddyOnAirByMid', TMessageType.CALL, self._seqid)
    args = isBuddyOnAirByMid_args()
    args.buddyMid = buddyMid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_isBuddyOnAirByMid(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = isBuddyOnAirByMid_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "isBuddyOnAirByMid failed: unknown result")

  def linkAndSendBuddyContentMessageToAllAsync(self, requestId, msg, sourceContentId):
    """
    Parameters:
     - requestId
     - msg
     - sourceContentId
    """
    self.send_linkAndSendBuddyContentMessageToAllAsync(requestId, msg, sourceContentId)
    return self.recv_linkAndSendBuddyContentMessageToAllAsync()

  def send_linkAndSendBuddyContentMessageToAllAsync(self, requestId, msg, sourceContentId):
    self._oprot.writeMessageBegin('linkAndSendBuddyContentMessageToAllAsync', TMessageType.CALL, self._seqid)
    args = linkAndSendBuddyContentMessageToAllAsync_args()
    args.requestId = requestId
    args.msg = msg
    args.sourceContentId = sourceContentId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_linkAndSendBuddyContentMessageToAllAsync(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = linkAndSendBuddyContentMessageToAllAsync_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "linkAndSendBuddyContentMessageToAllAsync failed: unknown result")

  def linkAndSendBuddyContentMessageTomids(self, requestId, msg, sourceContentId, mids):
    """
    Parameters:
     - requestId
     - msg
     - sourceContentId
     - mids
    """
    self.send_linkAndSendBuddyContentMessageTomids(requestId, msg, sourceContentId, mids)
    return self.recv_linkAndSendBuddyContentMessageTomids()

  def send_linkAndSendBuddyContentMessageTomids(self, requestId, msg, sourceContentId, mids):
    self._oprot.writeMessageBegin('linkAndSendBuddyContentMessageTomids', TMessageType.CALL, self._seqid)
    args = linkAndSendBuddyContentMessageTomids_args()
    args.requestId = requestId
    args.msg = msg
    args.sourceContentId = sourceContentId
    args.mids = mids
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_linkAndSendBuddyContentMessageTomids(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = linkAndSendBuddyContentMessageTomids_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "linkAndSendBuddyContentMessageTomids failed: unknown result")

  def notifyBuddyBlocked(self, buddyMid, blockerMid):
    """
    Parameters:
     - buddyMid
     - blockerMid
    """
    self.send_notifyBuddyBlocked(buddyMid, blockerMid)
    self.recv_notifyBuddyBlocked()

  def send_notifyBuddyBlocked(self, buddyMid, blockerMid):
    self._oprot.writeMessageBegin('notifyBuddyBlocked', TMessageType.CALL, self._seqid)
    args = notifyBuddyBlocked_args()
    args.buddyMid = buddyMid
    args.blockerMid = blockerMid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_notifyBuddyBlocked(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = notifyBuddyBlocked_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def notifyBuddyUnblocked(self, buddyMid, blockerMid):
    """
    Parameters:
     - buddyMid
     - blockerMid
    """
    self.send_notifyBuddyUnblocked(buddyMid, blockerMid)
    self.recv_notifyBuddyUnblocked()

  def send_notifyBuddyUnblocked(self, buddyMid, blockerMid):
    self._oprot.writeMessageBegin('notifyBuddyUnblocked', TMessageType.CALL, self._seqid)
    args = notifyBuddyUnblocked_args()
    args.buddyMid = buddyMid
    args.blockerMid = blockerMid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_notifyBuddyUnblocked(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = notifyBuddyUnblocked_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def registerBuddy(self, buddyId, searchId, displayName, statusMeessage, picture, settings):
    """
    Parameters:
     - buddyId
     - searchId
     - displayName
     - statusMeessage
     - picture
     - settings
    """
    self.send_registerBuddy(buddyId, searchId, displayName, statusMeessage, picture, settings)
    return self.recv_registerBuddy()

  def send_registerBuddy(self, buddyId, searchId, displayName, statusMeessage, picture, settings):
    self._oprot.writeMessageBegin('registerBuddy', TMessageType.CALL, self._seqid)
    args = registerBuddy_args()
    args.buddyId = buddyId
    args.searchId = searchId
    args.displayName = displayName
    args.statusMeessage = statusMeessage
    args.picture = picture
    args.settings = settings
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_registerBuddy(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = registerBuddy_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "registerBuddy failed: unknown result")

  def registerBuddyAdmin(self, buddyId, searchId, displayName, statusMessage, picture):
    """
    Parameters:
     - buddyId
     - searchId
     - displayName
     - statusMessage
     - picture
    """
    self.send_registerBuddyAdmin(buddyId, searchId, displayName, statusMessage, picture)
    return self.recv_registerBuddyAdmin()

  def send_registerBuddyAdmin(self, buddyId, searchId, displayName, statusMessage, picture):
    self._oprot.writeMessageBegin('registerBuddyAdmin', TMessageType.CALL, self._seqid)
    args = registerBuddyAdmin_args()
    args.buddyId = buddyId
    args.searchId = searchId
    args.displayName = displayName
    args.statusMessage = statusMessage
    args.picture = picture
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_registerBuddyAdmin(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = registerBuddyAdmin_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "registerBuddyAdmin failed: unknown result")

  def reissueContactTicket(self, expirationTime, maxUseCount):
    """
    Parameters:
     - expirationTime
     - maxUseCount
    """
    self.send_reissueContactTicket(expirationTime, maxUseCount)
    return self.recv_reissueContactTicket()

  def send_reissueContactTicket(self, expirationTime, maxUseCount):
    self._oprot.writeMessageBegin('reissueContactTicket', TMessageType.CALL, self._seqid)
    args = reissueContactTicket_args()
    args.expirationTime = expirationTime
    args.maxUseCount = maxUseCount
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_reissueContactTicket(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = reissueContactTicket_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "reissueContactTicket failed: unknown result")

  def removeBuddyMember(self, requestId, userMid):
    """
    Parameters:
     - requestId
     - userMid
    """
    self.send_removeBuddyMember(requestId, userMid)
    self.recv_removeBuddyMember()

  def send_removeBuddyMember(self, requestId, userMid):
    self._oprot.writeMessageBegin('removeBuddyMember', TMessageType.CALL, self._seqid)
    args = removeBuddyMember_args()
    args.requestId = requestId
    args.userMid = userMid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_removeBuddyMember(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = removeBuddyMember_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def removeBuddyMembers(self, requestId, userMids):
    """
    Parameters:
     - requestId
     - userMids
    """
    self.send_removeBuddyMembers(requestId, userMids)
    self.recv_removeBuddyMembers()

  def send_removeBuddyMembers(self, requestId, userMids):
    self._oprot.writeMessageBegin('removeBuddyMembers', TMessageType.CALL, self._seqid)
    args = removeBuddyMembers_args()
    args.requestId = requestId
    args.userMids = userMids
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_removeBuddyMembers(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = removeBuddyMembers_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def sendBuddyContentMessageToAll(self, requestId, msg, content):
    """
    Parameters:
     - requestId
     - msg
     - content
    """
    self.send_sendBuddyContentMessageToAll(requestId, msg, content)
    return self.recv_sendBuddyContentMessageToAll()

  def send_sendBuddyContentMessageToAll(self, requestId, msg, content):
    self._oprot.writeMessageBegin('sendBuddyContentMessageToAll', TMessageType.CALL, self._seqid)
    args = sendBuddyContentMessageToAll_args()
    args.requestId = requestId
    args.msg = msg
    args.content = content
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendBuddyContentMessageToAll(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sendBuddyContentMessageToAll_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendBuddyContentMessageToAll failed: unknown result")

  def sendBuddyContentMessageToAllAsync(self, requestId, msg, content):
    """
    Parameters:
     - requestId
     - msg
     - content
    """
    self.send_sendBuddyContentMessageToAllAsync(requestId, msg, content)
    return self.recv_sendBuddyContentMessageToAllAsync()

  def send_sendBuddyContentMessageToAllAsync(self, requestId, msg, content):
    self._oprot.writeMessageBegin('sendBuddyContentMessageToAllAsync', TMessageType.CALL, self._seqid)
    args = sendBuddyContentMessageToAllAsync_args()
    args.requestId = requestId
    args.msg = msg
    args.content = content
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendBuddyContentMessageToAllAsync(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sendBuddyContentMessageToAllAsync_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendBuddyContentMessageToAllAsync failed: unknown result")

  def sendBuddyContentMessageTomids(self, requestId, msg, content, mids):
    """
    Parameters:
     - requestId
     - msg
     - content
     - mids
    """
    self.send_sendBuddyContentMessageTomids(requestId, msg, content, mids)
    return self.recv_sendBuddyContentMessageTomids()

  def send_sendBuddyContentMessageTomids(self, requestId, msg, content, mids):
    self._oprot.writeMessageBegin('sendBuddyContentMessageTomids', TMessageType.CALL, self._seqid)
    args = sendBuddyContentMessageTomids_args()
    args.requestId = requestId
    args.msg = msg
    args.content = content
    args.mids = mids
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendBuddyContentMessageTomids(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sendBuddyContentMessageTomids_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendBuddyContentMessageTomids failed: unknown result")

  def sendBuddyContentMessageTomidsAsync(self, requestId, msg, content, mids):
    """
    Parameters:
     - requestId
     - msg
     - content
     - mids
    """
    self.send_sendBuddyContentMessageTomidsAsync(requestId, msg, content, mids)
    return self.recv_sendBuddyContentMessageTomidsAsync()

  def send_sendBuddyContentMessageTomidsAsync(self, requestId, msg, content, mids):
    self._oprot.writeMessageBegin('sendBuddyContentMessageTomidsAsync', TMessageType.CALL, self._seqid)
    args = sendBuddyContentMessageTomidsAsync_args()
    args.requestId = requestId
    args.msg = msg
    args.content = content
    args.mids = mids
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendBuddyContentMessageTomidsAsync(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sendBuddyContentMessageTomidsAsync_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendBuddyContentMessageTomidsAsync failed: unknown result")

  def sendBuddyMessageToAll(self, requestId, msg):
    """
    Parameters:
     - requestId
     - msg
    """
    self.send_sendBuddyMessageToAll(requestId, msg)
    return self.recv_sendBuddyMessageToAll()

  def send_sendBuddyMessageToAll(self, requestId, msg):
    self._oprot.writeMessageBegin('sendBuddyMessageToAll', TMessageType.CALL, self._seqid)
    args = sendBuddyMessageToAll_args()
    args.requestId = requestId
    args.msg = msg
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendBuddyMessageToAll(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sendBuddyMessageToAll_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendBuddyMessageToAll failed: unknown result")

  def sendBuddyMessageToAllAsync(self, requestId, msg):
    """
    Parameters:
     - requestId
     - msg
    """
    self.send_sendBuddyMessageToAllAsync(requestId, msg)
    return self.recv_sendBuddyMessageToAllAsync()

  def send_sendBuddyMessageToAllAsync(self, requestId, msg):
    self._oprot.writeMessageBegin('sendBuddyMessageToAllAsync', TMessageType.CALL, self._seqid)
    args = sendBuddyMessageToAllAsync_args()
    args.requestId = requestId
    args.msg = msg
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendBuddyMessageToAllAsync(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sendBuddyMessageToAllAsync_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendBuddyMessageToAllAsync failed: unknown result")

  def sendBuddyMessageTomids(self, requestId, msg, mids):
    """
    Parameters:
     - requestId
     - msg
     - mids
    """
    self.send_sendBuddyMessageTomids(requestId, msg, mids)
    return self.recv_sendBuddyMessageTomids()

  def send_sendBuddyMessageTomids(self, requestId, msg, mids):
    self._oprot.writeMessageBegin('sendBuddyMessageTomids', TMessageType.CALL, self._seqid)
    args = sendBuddyMessageTomids_args()
    args.requestId = requestId
    args.msg = msg
    args.mids = mids
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendBuddyMessageTomids(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sendBuddyMessageTomids_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendBuddyMessageTomids failed: unknown result")

  def sendBuddyMessageTomidsAsync(self, requestId, msg, mids):
    """
    Parameters:
     - requestId
     - msg
     - mids
    """
    self.send_sendBuddyMessageTomidsAsync(requestId, msg, mids)
    return self.recv_sendBuddyMessageTomidsAsync()

  def send_sendBuddyMessageTomidsAsync(self, requestId, msg, mids):
    self._oprot.writeMessageBegin('sendBuddyMessageTomidsAsync', TMessageType.CALL, self._seqid)
    args = sendBuddyMessageTomidsAsync_args()
    args.requestId = requestId
    args.msg = msg
    args.mids = mids
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendBuddyMessageTomidsAsync(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sendBuddyMessageTomidsAsync_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendBuddyMessageTomidsAsync failed: unknown result")

  def sendIndividualEventToAllAsync(self, requestId, buddyMid, notificationStatus):
    """
    Parameters:
     - requestId
     - buddyMid
     - notificationStatus
    """
    self.send_sendIndividualEventToAllAsync(requestId, buddyMid, notificationStatus)
    self.recv_sendIndividualEventToAllAsync()

  def send_sendIndividualEventToAllAsync(self, requestId, buddyMid, notificationStatus):
    self._oprot.writeMessageBegin('sendIndividualEventToAllAsync', TMessageType.CALL, self._seqid)
    args = sendIndividualEventToAllAsync_args()
    args.requestId = requestId
    args.buddyMid = buddyMid
    args.notificationStatus = notificationStatus
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendIndividualEventToAllAsync(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sendIndividualEventToAllAsync_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def setBuddyOnAir(self, requestId, onAir):
    """
    Parameters:
     - requestId
     - onAir
    """
    self.send_setBuddyOnAir(requestId, onAir)
    return self.recv_setBuddyOnAir()

  def send_setBuddyOnAir(self, requestId, onAir):
    self._oprot.writeMessageBegin('setBuddyOnAir', TMessageType.CALL, self._seqid)
    args = setBuddyOnAir_args()
    args.requestId = requestId
    args.onAir = onAir
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_setBuddyOnAir(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = setBuddyOnAir_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "setBuddyOnAir failed: unknown result")

  def setBuddyOnAirAsync(self, requestId, onAir):
    """
    Parameters:
     - requestId
     - onAir
    """
    self.send_setBuddyOnAirAsync(requestId, onAir)
    return self.recv_setBuddyOnAirAsync()

  def send_setBuddyOnAirAsync(self, requestId, onAir):
    self._oprot.writeMessageBegin('setBuddyOnAirAsync', TMessageType.CALL, self._seqid)
    args = setBuddyOnAirAsync_args()
    args.requestId = requestId
    args.onAir = onAir
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_setBuddyOnAirAsync(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = setBuddyOnAirAsync_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "setBuddyOnAirAsync failed: unknown result")

  def storeMessage(self, requestId, messageRequest):
    """
    Parameters:
     - requestId
     - messageRequest
    """
    self.send_storeMessage(requestId, messageRequest)
    return self.recv_storeMessage()

  def send_storeMessage(self, requestId, messageRequest):
    self._oprot.writeMessageBegin('storeMessage', TMessageType.CALL, self._seqid)
    args = storeMessage_args()
    args.requestId = requestId
    args.messageRequest = messageRequest
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_storeMessage(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = storeMessage_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "storeMessage failed: unknown result")

  def unblockBuddyMember(self, requestId, mid):
    """
    Parameters:
     - requestId
     - mid
    """
    self.send_unblockBuddyMember(requestId, mid)
    self.recv_unblockBuddyMember()

  def send_unblockBuddyMember(self, requestId, mid):
    self._oprot.writeMessageBegin('unblockBuddyMember', TMessageType.CALL, self._seqid)
    args = unblockBuddyMember_args()
    args.requestId = requestId
    args.mid = mid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_unblockBuddyMember(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = unblockBuddyMember_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def unregisterBuddy(self, requestId):
    """
    Parameters:
     - requestId
    """
    self.send_unregisterBuddy(requestId)
    self.recv_unregisterBuddy()

  def send_unregisterBuddy(self, requestId):
    self._oprot.writeMessageBegin('unregisterBuddy', TMessageType.CALL, self._seqid)
    args = unregisterBuddy_args()
    args.requestId = requestId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_unregisterBuddy(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = unregisterBuddy_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def unregisterBuddyAdmin(self, requestId):
    """
    Parameters:
     - requestId
    """
    self.send_unregisterBuddyAdmin(requestId)
    self.recv_unregisterBuddyAdmin()

  def send_unregisterBuddyAdmin(self, requestId):
    self._oprot.writeMessageBegin('unregisterBuddyAdmin', TMessageType.CALL, self._seqid)
    args = unregisterBuddyAdmin_args()
    args.requestId = requestId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_unregisterBuddyAdmin(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = unregisterBuddyAdmin_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def updateBuddyAdminProfileAttribute(self, requestId, attributes):
    """
    Parameters:
     - requestId
     - attributes
    """
    self.send_updateBuddyAdminProfileAttribute(requestId, attributes)
    self.recv_updateBuddyAdminProfileAttribute()

  def send_updateBuddyAdminProfileAttribute(self, requestId, attributes):
    self._oprot.writeMessageBegin('updateBuddyAdminProfileAttribute', TMessageType.CALL, self._seqid)
    args = updateBuddyAdminProfileAttribute_args()
    args.requestId = requestId
    args.attributes = attributes
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateBuddyAdminProfileAttribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateBuddyAdminProfileAttribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def updateBuddyAdminProfileImage(self, requestId, picture):
    """
    Parameters:
     - requestId
     - picture
    """
    self.send_updateBuddyAdminProfileImage(requestId, picture)
    self.recv_updateBuddyAdminProfileImage()

  def send_updateBuddyAdminProfileImage(self, requestId, picture):
    self._oprot.writeMessageBegin('updateBuddyAdminProfileImage', TMessageType.CALL, self._seqid)
    args = updateBuddyAdminProfileImage_args()
    args.requestId = requestId
    args.picture = picture
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateBuddyAdminProfileImage(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateBuddyAdminProfileImage_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def updateBuddyProfileAttributes(self, requestId, attributes):
    """
    Parameters:
     - requestId
     - attributes
    """
    self.send_updateBuddyProfileAttributes(requestId, attributes)
    return self.recv_updateBuddyProfileAttributes()

  def send_updateBuddyProfileAttributes(self, requestId, attributes):
    self._oprot.writeMessageBegin('updateBuddyProfileAttributes', TMessageType.CALL, self._seqid)
    args = updateBuddyProfileAttributes_args()
    args.requestId = requestId
    args.attributes = attributes
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateBuddyProfileAttributes(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateBuddyProfileAttributes_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updateBuddyProfileAttributes failed: unknown result")

  def updateBuddyProfileAttributesAsync(self, requestId, attributes):
    """
    Parameters:
     - requestId
     - attributes
    """
    self.send_updateBuddyProfileAttributesAsync(requestId, attributes)
    return self.recv_updateBuddyProfileAttributesAsync()

  def send_updateBuddyProfileAttributesAsync(self, requestId, attributes):
    self._oprot.writeMessageBegin('updateBuddyProfileAttributesAsync', TMessageType.CALL, self._seqid)
    args = updateBuddyProfileAttributesAsync_args()
    args.requestId = requestId
    args.attributes = attributes
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateBuddyProfileAttributesAsync(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateBuddyProfileAttributesAsync_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updateBuddyProfileAttributesAsync failed: unknown result")

  def updateBuddyProfileImage(self, requestId, image):
    """
    Parameters:
     - requestId
     - image
    """
    self.send_updateBuddyProfileImage(requestId, image)
    return self.recv_updateBuddyProfileImage()

  def send_updateBuddyProfileImage(self, requestId, image):
    self._oprot.writeMessageBegin('updateBuddyProfileImage', TMessageType.CALL, self._seqid)
    args = updateBuddyProfileImage_args()
    args.requestId = requestId
    args.image = image
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateBuddyProfileImage(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateBuddyProfileImage_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updateBuddyProfileImage failed: unknown result")

  def updateBuddyProfileImageAsync(self, requestId, image):
    """
    Parameters:
     - requestId
     - image
    """
    self.send_updateBuddyProfileImageAsync(requestId, image)
    return self.recv_updateBuddyProfileImageAsync()

  def send_updateBuddyProfileImageAsync(self, requestId, image):
    self._oprot.writeMessageBegin('updateBuddyProfileImageAsync', TMessageType.CALL, self._seqid)
    args = updateBuddyProfileImageAsync_args()
    args.requestId = requestId
    args.image = image
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateBuddyProfileImageAsync(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateBuddyProfileImageAsync_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updateBuddyProfileImageAsync failed: unknown result")

  def updateBuddySearchId(self, requestId, searchId):
    """
    Parameters:
     - requestId
     - searchId
    """
    self.send_updateBuddySearchId(requestId, searchId)
    self.recv_updateBuddySearchId()

  def send_updateBuddySearchId(self, requestId, searchId):
    self._oprot.writeMessageBegin('updateBuddySearchId', TMessageType.CALL, self._seqid)
    args = updateBuddySearchId_args()
    args.requestId = requestId
    args.searchId = searchId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateBuddySearchId(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateBuddySearchId_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def updateBuddySettings(self, settings):
    """
    Parameters:
     - settings
    """
    self.send_updateBuddySettings(settings)
    self.recv_updateBuddySettings()

  def send_updateBuddySettings(self, settings):
    self._oprot.writeMessageBegin('updateBuddySettings', TMessageType.CALL, self._seqid)
    args = updateBuddySettings_args()
    args.settings = settings
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateBuddySettings(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateBuddySettings_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def uploadBuddyContent(self, contentType, content):
    """
    Parameters:
     - contentType
     - content
    """
    self.send_uploadBuddyContent(contentType, content)
    return self.recv_uploadBuddyContent()

  def send_uploadBuddyContent(self, contentType, content):
    self._oprot.writeMessageBegin('uploadBuddyContent', TMessageType.CALL, self._seqid)
    args = uploadBuddyContent_args()
    args.contentType = contentType
    args.content = content
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_uploadBuddyContent(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = uploadBuddyContent_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "uploadBuddyContent failed: unknown result")

  def findBuddyContactsByQuery(self, language, country, query, fromIndex, count, requestSource):
    """
    Parameters:
     - language
     - country
     - query
     - fromIndex
     - count
     - requestSource
    """
    self.send_findBuddyContactsByQuery(language, country, query, fromIndex, count, requestSource)
    return self.recv_findBuddyContactsByQuery()

  def send_findBuddyContactsByQuery(self, language, country, query, fromIndex, count, requestSource):
    self._oprot.writeMessageBegin('findBuddyContactsByQuery', TMessageType.CALL, self._seqid)
    args = findBuddyContactsByQuery_args()
    args.language = language
    args.country = country
    args.query = query
    args.fromIndex = fromIndex
    args.count = count
    args.requestSource = requestSource
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findBuddyContactsByQuery(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = findBuddyContactsByQuery_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findBuddyContactsByQuery failed: unknown result")

  def getBuddyContacts(self, language, country, classification, fromIndex, count):
    """
    Parameters:
     - language
     - country
     - classification
     - fromIndex
     - count
    """
    self.send_getBuddyContacts(language, country, classification, fromIndex, count)
    return self.recv_getBuddyContacts()

  def send_getBuddyContacts(self, language, country, classification, fromIndex, count):
    self._oprot.writeMessageBegin('getBuddyContacts', TMessageType.CALL, self._seqid)
    args = getBuddyContacts_args()
    args.language = language
    args.country = country
    args.classification = classification
    args.fromIndex = fromIndex
    args.count = count
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getBuddyContacts(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getBuddyContacts_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getBuddyContacts failed: unknown result")

  def getBuddyDetail(self, buddyMid):
    """
    Parameters:
     - buddyMid
    """
    self.send_getBuddyDetail(buddyMid)
    return self.recv_getBuddyDetail()

  def send_getBuddyDetail(self, buddyMid):
    self._oprot.writeMessageBegin('getBuddyDetail', TMessageType.CALL, self._seqid)
    args = getBuddyDetail_args()
    args.buddyMid = buddyMid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getBuddyDetail(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getBuddyDetail_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getBuddyDetail failed: unknown result")

  def getBuddyOnAir(self, buddyMid):
    """
    Parameters:
     - buddyMid
    """
    self.send_getBuddyOnAir(buddyMid)
    return self.recv_getBuddyOnAir()

  def send_getBuddyOnAir(self, buddyMid):
    self._oprot.writeMessageBegin('getBuddyOnAir', TMessageType.CALL, self._seqid)
    args = getBuddyOnAir_args()
    args.buddyMid = buddyMid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getBuddyOnAir(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getBuddyOnAir_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getBuddyOnAir failed: unknown result")

  def getCountriesHavingBuddy(self):
    self.send_getCountriesHavingBuddy()
    return self.recv_getCountriesHavingBuddy()

  def send_getCountriesHavingBuddy(self):
    self._oprot.writeMessageBegin('getCountriesHavingBuddy', TMessageType.CALL, self._seqid)
    args = getCountriesHavingBuddy_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getCountriesHavingBuddy(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getCountriesHavingBuddy_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getCountriesHavingBuddy failed: unknown result")

  def getNewlyReleasedBuddyIds(self, country):
    """
    Parameters:
     - country
    """
    self.send_getNewlyReleasedBuddyIds(country)
    return self.recv_getNewlyReleasedBuddyIds()

  def send_getNewlyReleasedBuddyIds(self, country):
    self._oprot.writeMessageBegin('getNewlyReleasedBuddyIds', TMessageType.CALL, self._seqid)
    args = getNewlyReleasedBuddyIds_args()
    args.country = country
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getNewlyReleasedBuddyIds(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getNewlyReleasedBuddyIds_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getNewlyReleasedBuddyIds failed: unknown result")

  def getPopularBuddyBanner(self, language, country, applicationType, resourceSpecification):
    """
    Parameters:
     - language
     - country
     - applicationType
     - resourceSpecification
    """
    self.send_getPopularBuddyBanner(language, country, applicationType, resourceSpecification)
    return self.recv_getPopularBuddyBanner()

  def send_getPopularBuddyBanner(self, language, country, applicationType, resourceSpecification):
    self._oprot.writeMessageBegin('getPopularBuddyBanner', TMessageType.CALL, self._seqid)
    args = getPopularBuddyBanner_args()
    args.language = language
    args.country = country
    args.applicationType = applicationType
    args.resourceSpecification = resourceSpecification
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getPopularBuddyBanner(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getPopularBuddyBanner_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getPopularBuddyBanner failed: unknown result")

  def getPopularBuddyLists(self, language, country):
    """
    Parameters:
     - language
     - country
    """
    self.send_getPopularBuddyLists(language, country)
    return self.recv_getPopularBuddyLists()

  def send_getPopularBuddyLists(self, language, country):
    self._oprot.writeMessageBegin('getPopularBuddyLists', TMessageType.CALL, self._seqid)
    args = getPopularBuddyLists_args()
    args.language = language
    args.country = country
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getPopularBuddyLists(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getPopularBuddyLists_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getPopularBuddyLists failed: unknown result")

  def getPromotedBuddyContacts(self, language, country):
    """
    Parameters:
     - language
     - country
    """
    self.send_getPromotedBuddyContacts(language, country)
    return self.recv_getPromotedBuddyContacts()

  def send_getPromotedBuddyContacts(self, language, country):
    self._oprot.writeMessageBegin('getPromotedBuddyContacts', TMessageType.CALL, self._seqid)
    args = getPromotedBuddyContacts_args()
    args.language = language
    args.country = country
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getPromotedBuddyContacts(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getPromotedBuddyContacts_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getPromotedBuddyContacts failed: unknown result")

  def activeBuddySubscriberCount(self):
    self.send_activeBuddySubscriberCount()
    return self.recv_activeBuddySubscriberCount()

  def send_activeBuddySubscriberCount(self):
    self._oprot.writeMessageBegin('activeBuddySubscriberCount', TMessageType.CALL, self._seqid)
    args = activeBuddySubscriberCount_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_activeBuddySubscriberCount(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = activeBuddySubscriberCount_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "activeBuddySubscriberCount failed: unknown result")

  def addOperationForChannel(self, opType, param1, param2, param3):
    """
    Parameters:
     - opType
     - param1
     - param2
     - param3
    """
    self.send_addOperationForChannel(opType, param1, param2, param3)
    self.recv_addOperationForChannel()

  def send_addOperationForChannel(self, opType, param1, param2, param3):
    self._oprot.writeMessageBegin('addOperationForChannel', TMessageType.CALL, self._seqid)
    args = addOperationForChannel_args()
    args.opType = opType
    args.param1 = param1
    args.param2 = param2
    args.param3 = param3
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addOperationForChannel(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = addOperationForChannel_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def displayBuddySubscriberCount(self):
    self.send_displayBuddySubscriberCount()
    return self.recv_displayBuddySubscriberCount()

  def send_displayBuddySubscriberCount(self):
    self._oprot.writeMessageBegin('displayBuddySubscriberCount', TMessageType.CALL, self._seqid)
    args = displayBuddySubscriberCount_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_displayBuddySubscriberCount(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = displayBuddySubscriberCount_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "displayBuddySubscriberCount failed: unknown result")

  def findContactByUseridWithoutAbuseBlockForChannel(self, userid):
    """
    Parameters:
     - userid
    """
    self.send_findContactByUseridWithoutAbuseBlockForChannel(userid)
    return self.recv_findContactByUseridWithoutAbuseBlockForChannel()

  def send_findContactByUseridWithoutAbuseBlockForChannel(self, userid):
    self._oprot.writeMessageBegin('findContactByUseridWithoutAbuseBlockForChannel', TMessageType.CALL, self._seqid)
    args = findContactByUseridWithoutAbuseBlockForChannel_args()
    args.userid = userid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findContactByUseridWithoutAbuseBlockForChannel(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = findContactByUseridWithoutAbuseBlockForChannel_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findContactByUseridWithoutAbuseBlockForChannel failed: unknown result")

  def getAllContactIdsForChannel(self):
    self.send_getAllContactIdsForChannel()
    return self.recv_getAllContactIdsForChannel()

  def send_getAllContactIdsForChannel(self):
    self._oprot.writeMessageBegin('getAllContactIdsForChannel', TMessageType.CALL, self._seqid)
    args = getAllContactIdsForChannel_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAllContactIdsForChannel(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getAllContactIdsForChannel_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllContactIdsForChannel failed: unknown result")

  def getCompactContacts(self, lastModifiedTimestamp):
    """
    Parameters:
     - lastModifiedTimestamp
    """
    self.send_getCompactContacts(lastModifiedTimestamp)
    return self.recv_getCompactContacts()

  def send_getCompactContacts(self, lastModifiedTimestamp):
    self._oprot.writeMessageBegin('getCompactContacts', TMessageType.CALL, self._seqid)
    args = getCompactContacts_args()
    args.lastModifiedTimestamp = lastModifiedTimestamp
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getCompactContacts(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getCompactContacts_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getCompactContacts failed: unknown result")

  def getContactsForChannel(self, ids):
    """
    Parameters:
     - ids
    """
    self.send_getContactsForChannel(ids)
    return self.recv_getContactsForChannel()

  def send_getContactsForChannel(self, ids):
    self._oprot.writeMessageBegin('getContactsForChannel', TMessageType.CALL, self._seqid)
    args = getContactsForChannel_args()
    args.ids = ids
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getContactsForChannel(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getContactsForChannel_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getContactsForChannel failed: unknown result")

  def getDisplayName(self, mid):
    """
    Parameters:
     - mid
    """
    self.send_getDisplayName(mid)
    return self.recv_getDisplayName()

  def send_getDisplayName(self, mid):
    self._oprot.writeMessageBegin('getDisplayName', TMessageType.CALL, self._seqid)
    args = getDisplayName_args()
    args.mid = mid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getDisplayName(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getDisplayName_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getDisplayName failed: unknown result")

  def getFavoriteMidsForChannel(self):
    self.send_getFavoriteMidsForChannel()
    return self.recv_getFavoriteMidsForChannel()

  def send_getFavoriteMidsForChannel(self):
    self._oprot.writeMessageBegin('getFavoriteMidsForChannel', TMessageType.CALL, self._seqid)
    args = getFavoriteMidsForChannel_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getFavoriteMidsForChannel(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getFavoriteMidsForChannel_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getFavoriteMidsForChannel failed: unknown result")

  def getFriendMids(self):
    self.send_getFriendMids()
    return self.recv_getFriendMids()

  def send_getFriendMids(self):
    self._oprot.writeMessageBegin('getFriendMids', TMessageType.CALL, self._seqid)
    args = getFriendMids_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getFriendMids(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getFriendMids_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getFriendMids failed: unknown result")

  def getGroupMemberMids(self, groupId):
    """
    Parameters:
     - groupId
    """
    self.send_getGroupMemberMids(groupId)
    return self.recv_getGroupMemberMids()

  def send_getGroupMemberMids(self, groupId):
    self._oprot.writeMessageBegin('getGroupMemberMids', TMessageType.CALL, self._seqid)
    args = getGroupMemberMids_args()
    args.groupId = groupId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getGroupMemberMids(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getGroupMemberMids_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getGroupMemberMids failed: unknown result")

  def getGroupsForChannel(self, groupIds):
    """
    Parameters:
     - groupIds
    """
    self.send_getGroupsForChannel(groupIds)
    return self.recv_getGroupsForChannel()

  def send_getGroupsForChannel(self, groupIds):
    self._oprot.writeMessageBegin('getGroupsForChannel', TMessageType.CALL, self._seqid)
    args = getGroupsForChannel_args()
    args.groupIds = groupIds
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getGroupsForChannel(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getGroupsForChannel_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getGroupsForChannel failed: unknown result")

  def getIdentityCredential(self):
    self.send_getIdentityCredential()
    return self.recv_getIdentityCredential()

  def send_getIdentityCredential(self):
    self._oprot.writeMessageBegin('getIdentityCredential', TMessageType.CALL, self._seqid)
    args = getIdentityCredential_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getIdentityCredential(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getIdentityCredential_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getIdentityCredential failed: unknown result")

  def getJoinedGroupIdsForChannel(self):
    self.send_getJoinedGroupIdsForChannel()
    return self.recv_getJoinedGroupIdsForChannel()

  def send_getJoinedGroupIdsForChannel(self):
    self._oprot.writeMessageBegin('getJoinedGroupIdsForChannel', TMessageType.CALL, self._seqid)
    args = getJoinedGroupIdsForChannel_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getJoinedGroupIdsForChannel(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getJoinedGroupIdsForChannel_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getJoinedGroupIdsForChannel failed: unknown result")

  def getMetaProfile(self):
    self.send_getMetaProfile()
    return self.recv_getMetaProfile()

  def send_getMetaProfile(self):
    self._oprot.writeMessageBegin('getMetaProfile', TMessageType.CALL, self._seqid)
    args = getMetaProfile_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getMetaProfile(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getMetaProfile_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getMetaProfile failed: unknown result")

  def getMid(self):
    self.send_getMid()
    return self.recv_getMid()

  def send_getMid(self):
    self._oprot.writeMessageBegin('getMid', TMessageType.CALL, self._seqid)
    args = getMid_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getMid(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getMid_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getMid failed: unknown result")

  def getPrimaryClientForChannel(self):
    self.send_getPrimaryClientForChannel()
    return self.recv_getPrimaryClientForChannel()

  def send_getPrimaryClientForChannel(self):
    self._oprot.writeMessageBegin('getPrimaryClientForChannel', TMessageType.CALL, self._seqid)
    args = getPrimaryClientForChannel_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getPrimaryClientForChannel(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getPrimaryClientForChannel_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getPrimaryClientForChannel failed: unknown result")

  def getProfileForChannel(self):
    self.send_getProfileForChannel()
    return self.recv_getProfileForChannel()

  def send_getProfileForChannel(self):
    self._oprot.writeMessageBegin('getProfileForChannel', TMessageType.CALL, self._seqid)
    args = getProfileForChannel_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getProfileForChannel(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getProfileForChannel_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getProfileForChannel failed: unknown result")

  def getSimpleChannelContacts(self, ids):
    """
    Parameters:
     - ids
    """
    self.send_getSimpleChannelContacts(ids)
    return self.recv_getSimpleChannelContacts()

  def send_getSimpleChannelContacts(self, ids):
    self._oprot.writeMessageBegin('getSimpleChannelContacts', TMessageType.CALL, self._seqid)
    args = getSimpleChannelContacts_args()
    args.ids = ids
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getSimpleChannelContacts(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getSimpleChannelContacts_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getSimpleChannelContacts failed: unknown result")

  def getUserCountryForBilling(self, country, remoteIp):
    """
    Parameters:
     - country
     - remoteIp
    """
    self.send_getUserCountryForBilling(country, remoteIp)
    return self.recv_getUserCountryForBilling()

  def send_getUserCountryForBilling(self, country, remoteIp):
    self._oprot.writeMessageBegin('getUserCountryForBilling', TMessageType.CALL, self._seqid)
    args = getUserCountryForBilling_args()
    args.country = country
    args.remoteIp = remoteIp
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getUserCountryForBilling(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getUserCountryForBilling_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getUserCountryForBilling failed: unknown result")

  def getUserCreateTime(self):
    self.send_getUserCreateTime()
    return self.recv_getUserCreateTime()

  def send_getUserCreateTime(self):
    self._oprot.writeMessageBegin('getUserCreateTime', TMessageType.CALL, self._seqid)
    args = getUserCreateTime_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getUserCreateTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getUserCreateTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getUserCreateTime failed: unknown result")

  def getUserIdentities(self):
    self.send_getUserIdentities()
    return self.recv_getUserIdentities()

  def send_getUserIdentities(self):
    self._oprot.writeMessageBegin('getUserIdentities', TMessageType.CALL, self._seqid)
    args = getUserIdentities_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getUserIdentities(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getUserIdentities_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getUserIdentities failed: unknown result")

  def getUserLanguage(self):
    self.send_getUserLanguage()
    return self.recv_getUserLanguage()

  def send_getUserLanguage(self):
    self._oprot.writeMessageBegin('getUserLanguage', TMessageType.CALL, self._seqid)
    args = getUserLanguage_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getUserLanguage(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getUserLanguage_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getUserLanguage failed: unknown result")

  def getUserMidsWhoAddedMe(self):
    self.send_getUserMidsWhoAddedMe()
    return self.recv_getUserMidsWhoAddedMe()

  def send_getUserMidsWhoAddedMe(self):
    self._oprot.writeMessageBegin('getUserMidsWhoAddedMe', TMessageType.CALL, self._seqid)
    args = getUserMidsWhoAddedMe_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getUserMidsWhoAddedMe(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getUserMidsWhoAddedMe_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getUserMidsWhoAddedMe failed: unknown result")

  def isGroupMember(self, groupId):
    """
    Parameters:
     - groupId
    """
    self.send_isGroupMember(groupId)
    return self.recv_isGroupMember()

  def send_isGroupMember(self, groupId):
    self._oprot.writeMessageBegin('isGroupMember', TMessageType.CALL, self._seqid)
    args = isGroupMember_args()
    args.groupId = groupId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_isGroupMember(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = isGroupMember_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "isGroupMember failed: unknown result")

  def isInContact(self, mid):
    """
    Parameters:
     - mid
    """
    self.send_isInContact(mid)
    return self.recv_isInContact()

  def send_isInContact(self, mid):
    self._oprot.writeMessageBegin('isInContact', TMessageType.CALL, self._seqid)
    args = isInContact_args()
    args.mid = mid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_isInContact(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = isInContact_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "isInContact failed: unknown result")

  def registerChannelCP(self, cpId, registerPassword):
    """
    Parameters:
     - cpId
     - registerPassword
    """
    self.send_registerChannelCP(cpId, registerPassword)
    return self.recv_registerChannelCP()

  def send_registerChannelCP(self, cpId, registerPassword):
    self._oprot.writeMessageBegin('registerChannelCP', TMessageType.CALL, self._seqid)
    args = registerChannelCP_args()
    args.cpId = cpId
    args.registerPassword = registerPassword
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_registerChannelCP(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = registerChannelCP_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "registerChannelCP failed: unknown result")

  def removeNotificationStatus(self, notificationStatus):
    """
    Parameters:
     - notificationStatus
    """
    self.send_removeNotificationStatus(notificationStatus)
    self.recv_removeNotificationStatus()

  def send_removeNotificationStatus(self, notificationStatus):
    self._oprot.writeMessageBegin('removeNotificationStatus', TMessageType.CALL, self._seqid)
    args = removeNotificationStatus_args()
    args.notificationStatus = notificationStatus
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_removeNotificationStatus(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = removeNotificationStatus_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def sendMessageForChannel(self, message):
    """
    Parameters:
     - message
    """
    self.send_sendMessageForChannel(message)
    return self.recv_sendMessageForChannel()

  def send_sendMessageForChannel(self, message):
    self._oprot.writeMessageBegin('sendMessageForChannel', TMessageType.CALL, self._seqid)
    args = sendMessageForChannel_args()
    args.message = message
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendMessageForChannel(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sendMessageForChannel_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendMessageForChannel failed: unknown result")

  def sendPinCodeOperation(self, verifier):
    """
    Parameters:
     - verifier
    """
    self.send_sendPinCodeOperation(verifier)
    self.recv_sendPinCodeOperation()

  def send_sendPinCodeOperation(self, verifier):
    self._oprot.writeMessageBegin('sendPinCodeOperation', TMessageType.CALL, self._seqid)
    args = sendPinCodeOperation_args()
    args.verifier = verifier
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendPinCodeOperation(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sendPinCodeOperation_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def updateProfileAttributeForChannel(self, profileAttribute, value):
    """
    Parameters:
     - profileAttribute
     - value
    """
    self.send_updateProfileAttributeForChannel(profileAttribute, value)
    self.recv_updateProfileAttributeForChannel()

  def send_updateProfileAttributeForChannel(self, profileAttribute, value):
    self._oprot.writeMessageBegin('updateProfileAttributeForChannel', TMessageType.CALL, self._seqid)
    args = updateProfileAttributeForChannel_args()
    args.profileAttribute = profileAttribute
    args.value = value
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateProfileAttributeForChannel(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateProfileAttributeForChannel_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def approveChannelAndIssueChannelToken(self, channelId):
    """
    Parameters:
     - channelId
    """
    self.send_approveChannelAndIssueChannelToken(channelId)
    return self.recv_approveChannelAndIssueChannelToken()

  def send_approveChannelAndIssueChannelToken(self, channelId):
    self._oprot.writeMessageBegin('approveChannelAndIssueChannelToken', TMessageType.CALL, self._seqid)
    args = approveChannelAndIssueChannelToken_args()
    args.channelId = channelId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_approveChannelAndIssueChannelToken(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = approveChannelAndIssueChannelToken_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "approveChannelAndIssueChannelToken failed: unknown result")

  def approveChannelAndIssueRequestToken(self, channelId, otpId):
    """
    Parameters:
     - channelId
     - otpId
    """
    self.send_approveChannelAndIssueRequestToken(channelId, otpId)
    return self.recv_approveChannelAndIssueRequestToken()

  def send_approveChannelAndIssueRequestToken(self, channelId, otpId):
    self._oprot.writeMessageBegin('approveChannelAndIssueRequestToken', TMessageType.CALL, self._seqid)
    args = approveChannelAndIssueRequestToken_args()
    args.channelId = channelId
    args.otpId = otpId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_approveChannelAndIssueRequestToken(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = approveChannelAndIssueRequestToken_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "approveChannelAndIssueRequestToken failed: unknown result")

  def fetchNotificationItems(self, localRev):
    """
    Parameters:
     - localRev
    """
    self.send_fetchNotificationItems(localRev)
    return self.recv_fetchNotificationItems()

  def send_fetchNotificationItems(self, localRev):
    self._oprot.writeMessageBegin('fetchNotificationItems', TMessageType.CALL, self._seqid)
    args = fetchNotificationItems_args()
    args.localRev = localRev
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_fetchNotificationItems(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = fetchNotificationItems_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "fetchNotificationItems failed: unknown result")

  def getApprovedChannels(self, lastSynced, locale):
    """
    Parameters:
     - lastSynced
     - locale
    """
    self.send_getApprovedChannels(lastSynced, locale)
    return self.recv_getApprovedChannels()

  def send_getApprovedChannels(self, lastSynced, locale):
    self._oprot.writeMessageBegin('getApprovedChannels', TMessageType.CALL, self._seqid)
    args = getApprovedChannels_args()
    args.lastSynced = lastSynced
    args.locale = locale
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getApprovedChannels(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getApprovedChannels_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getApprovedChannels failed: unknown result")

  def getChannelInfo(self, channelId, locale):
    """
    Parameters:
     - channelId
     - locale
    """
    self.send_getChannelInfo(channelId, locale)
    return self.recv_getChannelInfo()

  def send_getChannelInfo(self, channelId, locale):
    self._oprot.writeMessageBegin('getChannelInfo', TMessageType.CALL, self._seqid)
    args = getChannelInfo_args()
    args.channelId = channelId
    args.locale = locale
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getChannelInfo(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getChannelInfo_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getChannelInfo failed: unknown result")

  def getChannelNotificationSetting(self, channelId, locale):
    """
    Parameters:
     - channelId
     - locale
    """
    self.send_getChannelNotificationSetting(channelId, locale)
    return self.recv_getChannelNotificationSetting()

  def send_getChannelNotificationSetting(self, channelId, locale):
    self._oprot.writeMessageBegin('getChannelNotificationSetting', TMessageType.CALL, self._seqid)
    args = getChannelNotificationSetting_args()
    args.channelId = channelId
    args.locale = locale
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getChannelNotificationSetting(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getChannelNotificationSetting_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getChannelNotificationSetting failed: unknown result")

  def getChannelNotificationSettings(self, locale):
    """
    Parameters:
     - locale
    """
    self.send_getChannelNotificationSettings(locale)
    return self.recv_getChannelNotificationSettings()

  def send_getChannelNotificationSettings(self, locale):
    self._oprot.writeMessageBegin('getChannelNotificationSettings', TMessageType.CALL, self._seqid)
    args = getChannelNotificationSettings_args()
    args.locale = locale
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getChannelNotificationSettings(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getChannelNotificationSettings_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getChannelNotificationSettings failed: unknown result")

  def getChannels(self, lastSynced, locale):
    """
    Parameters:
     - lastSynced
     - locale
    """
    self.send_getChannels(lastSynced, locale)
    return self.recv_getChannels()

  def send_getChannels(self, lastSynced, locale):
    self._oprot.writeMessageBegin('getChannels', TMessageType.CALL, self._seqid)
    args = getChannels_args()
    args.lastSynced = lastSynced
    args.locale = locale
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getChannels(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getChannels_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getChannels failed: unknown result")

  def getDomains(self, lastSynced):
    """
    Parameters:
     - lastSynced
    """
    self.send_getDomains(lastSynced)
    return self.recv_getDomains()

  def send_getDomains(self, lastSynced):
    self._oprot.writeMessageBegin('getDomains', TMessageType.CALL, self._seqid)
    args = getDomains_args()
    args.lastSynced = lastSynced
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getDomains(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getDomains_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getDomains failed: unknown result")

  def getFriendChannelMatrices(self, channelIds):
    """
    Parameters:
     - channelIds
    """
    self.send_getFriendChannelMatrices(channelIds)
    return self.recv_getFriendChannelMatrices()

  def send_getFriendChannelMatrices(self, channelIds):
    self._oprot.writeMessageBegin('getFriendChannelMatrices', TMessageType.CALL, self._seqid)
    args = getFriendChannelMatrices_args()
    args.channelIds = channelIds
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getFriendChannelMatrices(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getFriendChannelMatrices_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getFriendChannelMatrices failed: unknown result")

  def getNotificationBadgeCount(self, localRev):
    """
    Parameters:
     - localRev
    """
    self.send_getNotificationBadgeCount(localRev)
    return self.recv_getNotificationBadgeCount()

  def send_getNotificationBadgeCount(self, localRev):
    self._oprot.writeMessageBegin('getNotificationBadgeCount', TMessageType.CALL, self._seqid)
    args = getNotificationBadgeCount_args()
    args.localRev = localRev
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getNotificationBadgeCount(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getNotificationBadgeCount_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getNotificationBadgeCount failed: unknown result")

  def issueChannelToken(self, channelId):
    """
    Parameters:
     - channelId
    """
    self.send_issueChannelToken(channelId)
    return self.recv_issueChannelToken()

  def send_issueChannelToken(self, channelId):
    self._oprot.writeMessageBegin('issueChannelToken', TMessageType.CALL, self._seqid)
    args = issueChannelToken_args()
    args.channelId = channelId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_issueChannelToken(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = issueChannelToken_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "issueChannelToken failed: unknown result")

  def issueRequestToken(self, channelId, otpId):
    """
    Parameters:
     - channelId
     - otpId
    """
    self.send_issueRequestToken(channelId, otpId)
    return self.recv_issueRequestToken()

  def send_issueRequestToken(self, channelId, otpId):
    self._oprot.writeMessageBegin('issueRequestToken', TMessageType.CALL, self._seqid)
    args = issueRequestToken_args()
    args.channelId = channelId
    args.otpId = otpId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_issueRequestToken(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = issueRequestToken_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "issueRequestToken failed: unknown result")

  def issueRequestTokenWithAuthScheme(self, channelId, otpId, authScheme, returnUrl):
    """
    Parameters:
     - channelId
     - otpId
     - authScheme
     - returnUrl
    """
    self.send_issueRequestTokenWithAuthScheme(channelId, otpId, authScheme, returnUrl)
    return self.recv_issueRequestTokenWithAuthScheme()

  def send_issueRequestTokenWithAuthScheme(self, channelId, otpId, authScheme, returnUrl):
    self._oprot.writeMessageBegin('issueRequestTokenWithAuthScheme', TMessageType.CALL, self._seqid)
    args = issueRequestTokenWithAuthScheme_args()
    args.channelId = channelId
    args.otpId = otpId
    args.authScheme = authScheme
    args.returnUrl = returnUrl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_issueRequestTokenWithAuthScheme(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = issueRequestTokenWithAuthScheme_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "issueRequestTokenWithAuthScheme failed: unknown result")

  def reserveCoinUse(self, request, locale):
    """
    Parameters:
     - request
     - locale
    """
    self.send_reserveCoinUse(request, locale)
    return self.recv_reserveCoinUse()

  def send_reserveCoinUse(self, request, locale):
    self._oprot.writeMessageBegin('reserveCoinUse', TMessageType.CALL, self._seqid)
    args = reserveCoinUse_args()
    args.request = request
    args.locale = locale
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_reserveCoinUse(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = reserveCoinUse_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "reserveCoinUse failed: unknown result")

  def revokeChannel(self, channelId):
    """
    Parameters:
     - channelId
    """
    self.send_revokeChannel(channelId)
    self.recv_revokeChannel()

  def send_revokeChannel(self, channelId):
    self._oprot.writeMessageBegin('revokeChannel', TMessageType.CALL, self._seqid)
    args = revokeChannel_args()
    args.channelId = channelId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_revokeChannel(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = revokeChannel_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def syncChannelData(self, lastSynced, locale):
    """
    Parameters:
     - lastSynced
     - locale
    """
    self.send_syncChannelData(lastSynced, locale)
    return self.recv_syncChannelData()

  def send_syncChannelData(self, lastSynced, locale):
    self._oprot.writeMessageBegin('syncChannelData', TMessageType.CALL, self._seqid)
    args = syncChannelData_args()
    args.lastSynced = lastSynced
    args.locale = locale
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_syncChannelData(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = syncChannelData_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "syncChannelData failed: unknown result")

  def updateChannelNotificationSetting(self, setting):
    """
    Parameters:
     - setting
    """
    self.send_updateChannelNotificationSetting(setting)
    self.recv_updateChannelNotificationSetting()

  def send_updateChannelNotificationSetting(self, setting):
    self._oprot.writeMessageBegin('updateChannelNotificationSetting', TMessageType.CALL, self._seqid)
    args = updateChannelNotificationSetting_args()
    args.setting = setting
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateChannelNotificationSetting(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateChannelNotificationSetting_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def fetchMessageOperations(self, localRevision, lastOpTimestamp, count):
    """
    Parameters:
     - localRevision
     - lastOpTimestamp
     - count
    """
    self.send_fetchMessageOperations(localRevision, lastOpTimestamp, count)
    return self.recv_fetchMessageOperations()

  def send_fetchMessageOperations(self, localRevision, lastOpTimestamp, count):
    self._oprot.writeMessageBegin('fetchMessageOperations', TMessageType.CALL, self._seqid)
    args = fetchMessageOperations_args()
    args.localRevision = localRevision
    args.lastOpTimestamp = lastOpTimestamp
    args.count = count
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_fetchMessageOperations(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = fetchMessageOperations_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "fetchMessageOperations failed: unknown result")

  def getLastReadMessageIds(self, chatId):
    """
    Parameters:
     - chatId
    """
    self.send_getLastReadMessageIds(chatId)
    return self.recv_getLastReadMessageIds()

  def send_getLastReadMessageIds(self, chatId):
    self._oprot.writeMessageBegin('getLastReadMessageIds', TMessageType.CALL, self._seqid)
    args = getLastReadMessageIds_args()
    args.chatId = chatId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getLastReadMessageIds(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getLastReadMessageIds_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getLastReadMessageIds failed: unknown result")

  def multiGetLastReadMessageIds(self, chatIds):
    """
    Parameters:
     - chatIds
    """
    self.send_multiGetLastReadMessageIds(chatIds)
    return self.recv_multiGetLastReadMessageIds()

  def send_multiGetLastReadMessageIds(self, chatIds):
    self._oprot.writeMessageBegin('multiGetLastReadMessageIds', TMessageType.CALL, self._seqid)
    args = multiGetLastReadMessageIds_args()
    args.chatIds = chatIds
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_multiGetLastReadMessageIds(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = multiGetLastReadMessageIds_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "multiGetLastReadMessageIds failed: unknown result")

  def buyCoinProduct(self, paymentReservation):
    """
    Parameters:
     - paymentReservation
    """
    self.send_buyCoinProduct(paymentReservation)
    self.recv_buyCoinProduct()

  def send_buyCoinProduct(self, paymentReservation):
    self._oprot.writeMessageBegin('buyCoinProduct', TMessageType.CALL, self._seqid)
    args = buyCoinProduct_args()
    args.paymentReservation = paymentReservation
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_buyCoinProduct(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = buyCoinProduct_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def buyFreeProduct(self, receiverMid, productId, messageTemplate, language, country, packageId):
    """
    Parameters:
     - receiverMid
     - productId
     - messageTemplate
     - language
     - country
     - packageId
    """
    self.send_buyFreeProduct(receiverMid, productId, messageTemplate, language, country, packageId)
    self.recv_buyFreeProduct()

  def send_buyFreeProduct(self, receiverMid, productId, messageTemplate, language, country, packageId):
    self._oprot.writeMessageBegin('buyFreeProduct', TMessageType.CALL, self._seqid)
    args = buyFreeProduct_args()
    args.receiverMid = receiverMid
    args.productId = productId
    args.messageTemplate = messageTemplate
    args.language = language
    args.country = country
    args.packageId = packageId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_buyFreeProduct(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = buyFreeProduct_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def buyMustbuyProduct(self, receiverMid, productId, messageTemplate, language, country, packageId, serialNumber):
    """
    Parameters:
     - receiverMid
     - productId
     - messageTemplate
     - language
     - country
     - packageId
     - serialNumber
    """
    self.send_buyMustbuyProduct(receiverMid, productId, messageTemplate, language, country, packageId, serialNumber)
    self.recv_buyMustbuyProduct()

  def send_buyMustbuyProduct(self, receiverMid, productId, messageTemplate, language, country, packageId, serialNumber):
    self._oprot.writeMessageBegin('buyMustbuyProduct', TMessageType.CALL, self._seqid)
    args = buyMustbuyProduct_args()
    args.receiverMid = receiverMid
    args.productId = productId
    args.messageTemplate = messageTemplate
    args.language = language
    args.country = country
    args.packageId = packageId
    args.serialNumber = serialNumber
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_buyMustbuyProduct(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = buyMustbuyProduct_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def checkCanReceivePresent(self, recipientMid, packageId, language, country):
    """
    Parameters:
     - recipientMid
     - packageId
     - language
     - country
    """
    self.send_checkCanReceivePresent(recipientMid, packageId, language, country)
    self.recv_checkCanReceivePresent()

  def send_checkCanReceivePresent(self, recipientMid, packageId, language, country):
    self._oprot.writeMessageBegin('checkCanReceivePresent', TMessageType.CALL, self._seqid)
    args = checkCanReceivePresent_args()
    args.recipientMid = recipientMid
    args.packageId = packageId
    args.language = language
    args.country = country
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_checkCanReceivePresent(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = checkCanReceivePresent_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def getActivePurchases(self, start, size, language, country):
    """
    Parameters:
     - start
     - size
     - language
     - country
    """
    self.send_getActivePurchases(start, size, language, country)
    return self.recv_getActivePurchases()

  def send_getActivePurchases(self, start, size, language, country):
    self._oprot.writeMessageBegin('getActivePurchases', TMessageType.CALL, self._seqid)
    args = getActivePurchases_args()
    args.start = start
    args.size = size
    args.language = language
    args.country = country
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getActivePurchases(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getActivePurchases_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getActivePurchases failed: unknown result")

  def getActivePurchaseVersions(self, start, size, language, country):
    """
    Parameters:
     - start
     - size
     - language
     - country
    """
    self.send_getActivePurchaseVersions(start, size, language, country)
    return self.recv_getActivePurchaseVersions()

  def send_getActivePurchaseVersions(self, start, size, language, country):
    self._oprot.writeMessageBegin('getActivePurchaseVersions', TMessageType.CALL, self._seqid)
    args = getActivePurchaseVersions_args()
    args.start = start
    args.size = size
    args.language = language
    args.country = country
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getActivePurchaseVersions(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getActivePurchaseVersions_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getActivePurchaseVersions failed: unknown result")

  def getCoinProducts(self, appStoreCode, country, language):
    """
    Parameters:
     - appStoreCode
     - country
     - language
    """
    self.send_getCoinProducts(appStoreCode, country, language)
    return self.recv_getCoinProducts()

  def send_getCoinProducts(self, appStoreCode, country, language):
    self._oprot.writeMessageBegin('getCoinProducts', TMessageType.CALL, self._seqid)
    args = getCoinProducts_args()
    args.appStoreCode = appStoreCode
    args.country = country
    args.language = language
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getCoinProducts(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getCoinProducts_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getCoinProducts failed: unknown result")

  def getCoinProductsByPgCode(self, appStoreCode, pgCode, country, language):
    """
    Parameters:
     - appStoreCode
     - pgCode
     - country
     - language
    """
    self.send_getCoinProductsByPgCode(appStoreCode, pgCode, country, language)
    return self.recv_getCoinProductsByPgCode()

  def send_getCoinProductsByPgCode(self, appStoreCode, pgCode, country, language):
    self._oprot.writeMessageBegin('getCoinProductsByPgCode', TMessageType.CALL, self._seqid)
    args = getCoinProductsByPgCode_args()
    args.appStoreCode = appStoreCode
    args.pgCode = pgCode
    args.country = country
    args.language = language
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getCoinProductsByPgCode(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getCoinProductsByPgCode_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getCoinProductsByPgCode failed: unknown result")

  def getCoinPurchaseHistory(self, request):
    """
    Parameters:
     - request
    """
    self.send_getCoinPurchaseHistory(request)
    return self.recv_getCoinPurchaseHistory()

  def send_getCoinPurchaseHistory(self, request):
    self._oprot.writeMessageBegin('getCoinPurchaseHistory', TMessageType.CALL, self._seqid)
    args = getCoinPurchaseHistory_args()
    args.request = request
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getCoinPurchaseHistory(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getCoinPurchaseHistory_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getCoinPurchaseHistory failed: unknown result")

  def getCoinUseAndRefundHistory(self, request):
    """
    Parameters:
     - request
    """
    self.send_getCoinUseAndRefundHistory(request)
    return self.recv_getCoinUseAndRefundHistory()

  def send_getCoinUseAndRefundHistory(self, request):
    self._oprot.writeMessageBegin('getCoinUseAndRefundHistory', TMessageType.CALL, self._seqid)
    args = getCoinUseAndRefundHistory_args()
    args.request = request
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getCoinUseAndRefundHistory(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getCoinUseAndRefundHistory_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getCoinUseAndRefundHistory failed: unknown result")

  def getDownloads(self, start, size, language, country):
    """
    Parameters:
     - start
     - size
     - language
     - country
    """
    self.send_getDownloads(start, size, language, country)
    return self.recv_getDownloads()

  def send_getDownloads(self, start, size, language, country):
    self._oprot.writeMessageBegin('getDownloads', TMessageType.CALL, self._seqid)
    args = getDownloads_args()
    args.start = start
    args.size = size
    args.language = language
    args.country = country
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getDownloads(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getDownloads_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getDownloads failed: unknown result")

  def getEventPackages(self, start, size, language, country):
    """
    Parameters:
     - start
     - size
     - language
     - country
    """
    self.send_getEventPackages(start, size, language, country)
    return self.recv_getEventPackages()

  def send_getEventPackages(self, start, size, language, country):
    self._oprot.writeMessageBegin('getEventPackages', TMessageType.CALL, self._seqid)
    args = getEventPackages_args()
    args.start = start
    args.size = size
    args.language = language
    args.country = country
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getEventPackages(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getEventPackages_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getEventPackages failed: unknown result")

  def getNewlyReleasedPackages(self, start, size, language, country):
    """
    Parameters:
     - start
     - size
     - language
     - country
    """
    self.send_getNewlyReleasedPackages(start, size, language, country)
    return self.recv_getNewlyReleasedPackages()

  def send_getNewlyReleasedPackages(self, start, size, language, country):
    self._oprot.writeMessageBegin('getNewlyReleasedPackages', TMessageType.CALL, self._seqid)
    args = getNewlyReleasedPackages_args()
    args.start = start
    args.size = size
    args.language = language
    args.country = country
    args.write(self.